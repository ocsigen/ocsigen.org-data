<<code language="ocaml" | sig
  exception Ocsigen_Internal_Error of string
  exception Input_is_too_large
  exception Ocsigen_Bad_Request
  exception Ocsigen_Request_too_long
  val ( >>= ) : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t
  val ( >|= ) : 'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t
  val ( !! ) : 'a Lazy.t -> 'a
  val ( |> ) : 'a -> ('a -> 'b) -> 'b
  val ( @@ ) : ('a -> 'b) -> 'a -> 'b
  external id : 'a -> 'a = "%identity"
  val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
  val curry : ('a * 'b -> 'c) -> 'a -> 'b -> 'c
  val uncurry : ('a -> 'b -> 'c) -> 'a * 'b -> 'c
  module Tuple3 :
    sig
      val fst : 'a * 'b * 'c -> 'a
      val snd : 'a * 'b * 'c -> 'b
      val thd : 'a * 'b * 'c -> 'c
    end
  type poly = Ocsigen_lib.poly
  val to_poly : 'a -> poly
  val from_poly : poly -> 'a
  type yesnomaybe = Ocsigen_lib.yesnomaybe = Yes | No | Maybe
  type ('a, 'b) leftright =
    ('a, 'b) Ocsigen_lib.leftright =
      Left of 'a
    | Right of 'b
  val advert : string
  module Option :
    sig
      type 'a t = 'a option
      val map : ('a -> 'b) -> 'a t -> 'b t
      val get : (unit -> 'a) -> 'a t -> 'a
      val get' : 'a -> 'a t -> 'a
      val iter : ('a -> unit) -> 'a t -> unit
      val return : 'a -> 'a t
      val bind : 'a t -> ('a -> 'b t) -> 'b t
      val to_list : 'a t -> 'a list
      module Lwt :
        sig
          val map : ('a -> 'b Lwt.t) -> 'a t -> 'b t Lwt.t
          val get : (unit -> 'a Lwt.t) -> 'a t -> 'a Lwt.t
          val get' : 'a Lwt.t -> 'a t -> 'a Lwt.t
          val iter : ('a -> unit Lwt.t) -> 'a t -> unit Lwt.t
          val bind : 'a t -> ('a -> 'b t Lwt.t) -> 'b t Lwt.t
        end
    end
  module List :
    sig
      val length : 'a list -> int
      val cons : 'a -> 'a list -> 'a list
      val hd : 'a list -> 'a
      val tl : 'a list -> 'a list
      val nth : 'a list -> int -> 'a
      val rev : 'a list -> 'a list
      val append : 'a list -> 'a list -> 'a list
      val rev_append : 'a list -> 'a list -> 'a list
      val concat : 'a list list -> 'a list
      val flatten : 'a list list -> 'a list
      val iter : ('a -> unit) -> 'a list -> unit
      val iteri : (int -> 'a -> unit) -> 'a list -> unit
      val map : ('a -> 'b) -> 'a list -> 'b list
      val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list
      val rev_map : ('a -> 'b) -> 'a list -> 'b list
      val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
      val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
      val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit
      val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val fold_left2 :
        ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a
      val fold_right2 :
        ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
      val for_all : ('a -> bool) -> 'a list -> bool
      val exists : ('a -> bool) -> 'a list -> bool
      val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val mem : 'a -> 'a list -> bool
      val memq : 'a -> 'a list -> bool
      val find : ('a -> bool) -> 'a list -> 'a
      val filter : ('a -> bool) -> 'a list -> 'a list
      val find_all : ('a -> bool) -> 'a list -> 'a list
      val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
      val assoc : 'a -> ('a * 'b) list -> 'b
      val assq : 'a -> ('a * 'b) list -> 'b
      val mem_assoc : 'a -> ('a * 'b) list -> bool
      val mem_assq : 'a -> ('a * 'b) list -> bool
      val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
      val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
      val split : ('a * 'b) list -> 'a list * 'b list
      val combine : 'a list -> 'b list -> ('a * 'b) list
      val sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list
      val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list
      val map_filter : ('a -> 'b option) -> 'a list -> 'b list
      val last : 'a list -> 'a
      val assoc_remove : 'a -> ('a * 'b) list -> 'b * ('a * 'b) list
      val remove_first_if_any : 'a -> 'a list -> 'a list
      val remove_first_if_any_q : 'a -> 'a list -> 'a list
      val remove_first : 'a -> 'a list -> 'a list
      val remove_first_q : 'a -> 'a list -> 'a list
      val remove_all : 'a -> 'a list -> 'a list
      val remove_all_q : 'a -> 'a list -> 'a list
      val remove_all_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
      val remove_all_assoc_q : 'a -> ('a * 'b) list -> ('a * 'b) list
      val is_prefix : 'a list -> 'a list -> bool
      val chop : int -> 'a list -> 'a list
      val split_at : int -> 'a list -> 'a list * 'a list
    end
  module Clist :
    sig
      type 'a t = 'a Ocsigen_lib.Clist.t
      type 'a node = 'a Ocsigen_lib.Clist.node
      val make : 'a -> 'a node
      val create : unit -> 'a t
      val insert : 'a t -> 'a node -> unit
      val remove : 'a node -> unit
      val value : 'a node -> 'a
      val in_list : 'a node -> bool
      val is_empty : 'a t -> bool
      val iter : ('a -> unit) -> 'a t -> unit
      val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a
    end
  module Int :
    sig
      module Table :
        sig
          type key = int
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
    end
  module String_base :
    sig
      external length : string -> int = "%string_length"
      external get : string -> int -> char = "%string_safe_get"
      external set : bytes -> int -> char -> unit = "%string_safe_set"
      external create : int -> bytes = "caml_create_string"
      val make : int -> char -> string
      val init : int -> (int -> char) -> string
      val copy : string -> string
      val sub : string -> int -> int -> string
      val fill : bytes -> int -> int -> char -> unit
      val blit : string -> int -> bytes -> int -> int -> unit
      val concat : string -> string list -> string
      val iter : (char -> unit) -> string -> unit
      val iteri : (int -> char -> unit) -> string -> unit
      val map : (char -> char) -> string -> string
      val mapi : (int -> char -> char) -> string -> string
      val trim : string -> string
      val escaped : string -> string
      val index : string -> char -> int
      val rindex : string -> char -> int
      val index_from : string -> int -> char -> int
      val rindex_from : string -> int -> char -> int
      val contains : string -> char -> bool
      val contains_from : string -> int -> char -> bool
      val rcontains_from : string -> int -> char -> bool
      val uppercase : string -> string
      val lowercase : string -> string
      val capitalize : string -> string
      val uncapitalize : string -> string
      val uppercase_ascii : string -> string
      val lowercase_ascii : string -> string
      val capitalize_ascii : string -> string
      val uncapitalize_ascii : string -> string
      type t = string
      val compare : t -> t -> int
      val equal : t -> t -> bool
      val split_on_char : char -> string -> string list
      external unsafe_get : string -> int -> char = "%string_unsafe_get"
      external unsafe_set : bytes -> int -> char -> unit
        = "%string_unsafe_set"
      external unsafe_blit : string -> int -> bytes -> int -> int -> unit
        = "caml_blit_string" [@@noalloc]
      external unsafe_fill : bytes -> int -> int -> char -> unit
        = "caml_fill_string" [@@noalloc]
      val remove_spaces : string -> int -> int -> string
      val basic_sep : char -> string -> string * string
      val sep : char -> string -> string * string
      val split : ?multisep:bool -> char -> string -> string list
      val may_append : string -> sep:string -> string -> string
      val may_concat : string -> sep:string -> string -> string
      val first_diff : string -> string -> int -> int -> int
      module Table :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
      module Set :
        sig
          type elt = string
          type t
          val empty : t
          val is_empty : t -> bool
          val mem : elt -> t -> bool
          val add : elt -> t -> t
          val singleton : elt -> t
          val remove : elt -> t -> t
          val union : t -> t -> t
          val inter : t -> t -> t
          val diff : t -> t -> t
          val compare : t -> t -> int
          val equal : t -> t -> bool
          val subset : t -> t -> bool
          val iter : (elt -> unit) -> t -> unit
          val map : (elt -> elt) -> t -> t
          val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
          val for_all : (elt -> bool) -> t -> bool
          val exists : (elt -> bool) -> t -> bool
          val filter : (elt -> bool) -> t -> t
          val partition : (elt -> bool) -> t -> t * t
          val cardinal : t -> int
          val elements : t -> elt list
          val min_elt : t -> elt
          val max_elt : t -> elt
          val choose : t -> elt
          val split : elt -> t -> t * bool * t
          val find : elt -> t -> elt
          val of_list : elt list -> t
        end
      module Map :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
    end
  module Url_base :
    sig
      type t = string
      type uri = string
      val make_absolute_url :
        https:bool -> host:string -> port:int -> uri -> t
      type path = string list
      val remove_dotdot : path -> path
      val remove_end_slash : string -> string
      val remove_internal_slash : path -> path
      val change_empty_list : path -> path
      val add_end_slash_if_missing : path -> path
      val remove_slash_at_end : path -> path
      val remove_slash_at_beginning : path -> path
      val is_prefix_skip_end_slash : string list -> string list -> bool
      val split_fragment : string -> string * string option
    end
  module Printexc :
    sig
      val to_string : exn -> string
      val print : ('a -> 'b) -> 'a -> 'b
      val catch : ('a -> 'b) -> 'a -> 'b
      val print_backtrace : out_channel -> unit
      val get_backtrace : unit -> string
      val record_backtrace : bool -> unit
      val backtrace_status : unit -> bool
      val register_printer : (exn -> string option) -> unit
      type raw_backtrace
      val get_raw_backtrace : unit -> raw_backtrace
      val print_raw_backtrace : out_channel -> raw_backtrace -> unit
      val raw_backtrace_to_string : raw_backtrace -> string
      val get_callstack : int -> raw_backtrace
      val set_uncaught_exception_handler :
        (exn -> raw_backtrace -> unit) -> unit
      type backtrace_slot
      val backtrace_slots : raw_backtrace -> backtrace_slot array option
      type location = {
        filename : string;
        line_number : int;
        start_char : int;
        end_char : int;
      }
      module Slot :
        sig
          type t = backtrace_slot
          val is_raise : t -> bool
          val is_inline : t -> bool
          val location : t -> location option
          val format : int -> t -> string option
        end
      type raw_backtrace_slot
      val raw_backtrace_length : raw_backtrace -> int
      val get_raw_backtrace_slot : raw_backtrace -> int -> raw_backtrace_slot
      val convert_raw_backtrace_slot : raw_backtrace_slot -> backtrace_slot
      val get_raw_backtrace_next_slot :
        raw_backtrace_slot -> raw_backtrace_slot option
      val exn_slot_id : exn -> int
      val exn_slot_name : exn -> string
      val register_exn_printer : ((exn -> string) -> exn -> string) -> unit
    end
  module String :
    sig
      external length : string -> int = "%string_length"
      external get : string -> int -> char = "%string_safe_get"
      external set : bytes -> int -> char -> unit = "%string_safe_set"
      external create : int -> bytes = "caml_create_string"
      val make : int -> char -> string
      val init : int -> (int -> char) -> string
      val copy : string -> string
      val sub : string -> int -> int -> string
      val fill : bytes -> int -> int -> char -> unit
      val blit : string -> int -> bytes -> int -> int -> unit
      val concat : string -> string list -> string
      val iter : (char -> unit) -> string -> unit
      val iteri : (int -> char -> unit) -> string -> unit
      val map : (char -> char) -> string -> string
      val mapi : (int -> char -> char) -> string -> string
      val trim : string -> string
      val escaped : string -> string
      val index : string -> char -> int
      val rindex : string -> char -> int
      val index_from : string -> int -> char -> int
      val rindex_from : string -> int -> char -> int
      val contains : string -> char -> bool
      val contains_from : string -> int -> char -> bool
      val rcontains_from : string -> int -> char -> bool
      val uppercase : string -> string
      val lowercase : string -> string
      val capitalize : string -> string
      val uncapitalize : string -> string
      val uppercase_ascii : string -> string
      val lowercase_ascii : string -> string
      val capitalize_ascii : string -> string
      val uncapitalize_ascii : string -> string
      type t = string
      val compare : t -> t -> int
      val equal : t -> t -> bool
      val split_on_char : char -> string -> string list
      external unsafe_get : string -> int -> char = "%string_unsafe_get"
      external unsafe_set : bytes -> int -> char -> unit
        = "%string_unsafe_set"
      external unsafe_blit : string -> int -> bytes -> int -> int -> unit
        = "caml_blit_string" [@@noalloc]
      external unsafe_fill : bytes -> int -> int -> char -> unit
        = "caml_fill_string" [@@noalloc]
      val remove_spaces : string -> int -> int -> string
      val basic_sep : char -> string -> string * string
      val sep : char -> string -> string * string
      val split : ?multisep:bool -> char -> string -> string list
      val may_append : string -> sep:string -> string -> string
      val may_concat : string -> sep:string -> string -> string
      val first_diff : string -> string -> int -> int -> int
      module Table :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
      module Set :
        sig
          type elt = string
          type t
          val empty : t
          val is_empty : t -> bool
          val mem : elt -> t -> bool
          val add : elt -> t -> t
          val singleton : elt -> t
          val remove : elt -> t -> t
          val union : t -> t -> t
          val inter : t -> t -> t
          val diff : t -> t -> t
          val compare : t -> t -> int
          val equal : t -> t -> bool
          val subset : t -> t -> bool
          val iter : (elt -> unit) -> t -> unit
          val map : (elt -> elt) -> t -> t
          val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
          val for_all : (elt -> bool) -> t -> bool
          val exists : (elt -> bool) -> t -> bool
          val filter : (elt -> bool) -> t -> t
          val partition : (elt -> bool) -> t -> t * t
          val cardinal : t -> int
          val elements : t -> elt list
          val min_elt : t -> elt
          val max_elt : t -> elt
          val choose : t -> elt
          val split : elt -> t -> t * bool * t
          val find : elt -> t -> elt
          val of_list : elt list -> t
        end
      module Map :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
    end
  module Ip_address :
    sig
      exception No_such_host
      val get_inet_addr : ?v6:bool -> string -> Unix.inet_addr Lwt.t
    end
  module Filename :
    sig
      val current_dir_name : string
      val parent_dir_name : string
      val dir_sep : string
      val concat : string -> string -> string
      val is_relative : string -> bool
      val is_implicit : string -> bool
      val check_suffix : string -> string -> bool
      val chop_suffix : string -> string -> string
      val extension : string -> string
      val remove_extension : string -> string
      val chop_extension : string -> string
      val basename : string -> string
      val dirname : string -> string
      val temp_file : ?temp_dir:string -> string -> string -> string
      val open_temp_file :
        ?mode:open_flag list ->
        ?perms:int ->
        ?temp_dir:string -> string -> string -> string * out_channel
      val get_temp_dir_name : unit -> string
      val set_temp_dir_name : string -> unit
      val temp_dir_name : string
      val quote : string -> string
      val extension_no_directory : string -> string
    end
  module Url :
    sig
      type t = Url_base.t
      type uri = string
      val make_absolute_url :
        https:bool -> host:string -> port:int -> uri -> t
      type path = string list
      val remove_dotdot : path -> path
      val remove_end_slash : string -> string
      val remove_internal_slash : path -> path
      val change_empty_list : path -> path
      val add_end_slash_if_missing : path -> path
      val remove_slash_at_end : path -> path
      val remove_slash_at_beginning : path -> path
      val is_prefix_skip_end_slash : string list -> string list -> bool
      val split_fragment : string -> string * string option
      val fixup_url_string : t -> t
      val encode : ?plus:bool -> string -> string
      val decode : ?plus:bool -> string -> string
      val make_encoded_parameters : (string * string) list -> string
      val string_of_url_path : encode:bool -> path -> uri
      val parse :
        t ->
        bool option * string option * int option * string * string list *
        string option * (string * string) list Lazy.t
      val split_path : string -> string list
    end
  exception Eliom_Internal_Error of string
  module Lwt_ops :
    sig
      val ( >>= ) : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t
      val ( =<< ) : ('a -> 'b Lwt.t) -> 'a Lwt.t -> 'b Lwt.t
      val ( >|= ) : 'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t
      val ( =|< ) : ('a -> 'b) -> 'a Lwt.t -> 'b Lwt.t
    end
  module type Map_S =
    sig
      type key
      type +'a t
      val empty : 'a t
      val is_empty : 'a t -> bool
      val mem : key -> 'a t -> bool
      val add : key -> 'a -> 'a t -> 'a t
      val singleton : key -> 'a -> 'a t
      val remove : key -> 'a t -> 'a t
      val merge :
        (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
      val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
      val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
      val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val for_all : (key -> 'a -> bool) -> 'a t -> bool
      val exists : (key -> 'a -> bool) -> 'a t -> bool
      val filter : (key -> 'a -> bool) -> 'a t -> 'a t
      val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
      val cardinal : 'a t -> int
      val bindings : 'a t -> (key * 'a) list
      val min_binding : 'a t -> key * 'a
      val max_binding : 'a t -> key * 'a
      val choose : 'a t -> key * 'a
      val split : key -> 'a t -> 'a t * 'a option * 'a t
      val find : key -> 'a t -> 'a
      val map : ('a -> 'b) -> 'a t -> 'b t
      val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
      val from_list : (key * 'a) list -> 'a t
      val to_string : ?sep:string -> ('a -> string) -> 'a t -> string
    end
  module Int64_map :
    sig
      type key = int64
      type 'a t = 'a Eliom_lib_base.Int64_map.t
      val empty : 'a t
      val is_empty : 'a t -> bool
      val mem : key -> 'a t -> bool
      val add : key -> 'a -> 'a t -> 'a t
      val singleton : key -> 'a -> 'a t
      val remove : key -> 'a t -> 'a t
      val merge :
        (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
      val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
      val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
      val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val for_all : (key -> 'a -> bool) -> 'a t -> bool
      val exists : (key -> 'a -> bool) -> 'a t -> bool
      val filter : (key -> 'a -> bool) -> 'a t -> 'a t
      val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
      val cardinal : 'a t -> int
      val bindings : 'a t -> (key * 'a) list
      val min_binding : 'a t -> key * 'a
      val max_binding : 'a t -> key * 'a
      val choose : 'a t -> key * 'a
      val split : key -> 'a t -> 'a t * 'a option * 'a t
      val find : key -> 'a t -> 'a
      val map : ('a -> 'b) -> 'a t -> 'b t
      val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
      val from_list : (key * 'a) list -> 'a t
      val to_string : ?sep:string -> ('a -> string) -> 'a t -> string
    end
  module Int_map :
    sig
      type key = int
      type 'a t = 'a Eliom_lib_base.Int_map.t
      val empty : 'a t
      val is_empty : 'a t -> bool
      val mem : key -> 'a t -> bool
      val add : key -> 'a -> 'a t -> 'a t
      val singleton : key -> 'a -> 'a t
      val remove : key -> 'a t -> 'a t
      val merge :
        (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
      val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
      val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
      val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val for_all : (key -> 'a -> bool) -> 'a t -> bool
      val exists : (key -> 'a -> bool) -> 'a t -> bool
      val filter : (key -> 'a -> bool) -> 'a t -> 'a t
      val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
      val cardinal : 'a t -> int
      val bindings : 'a t -> (key * 'a) list
      val min_binding : 'a t -> key * 'a
      val max_binding : 'a t -> key * 'a
      val choose : 'a t -> key * 'a
      val split : key -> 'a t -> 'a t * 'a option * 'a t
      val find : key -> 'a t -> 'a
      val map : ('a -> 'b) -> 'a t -> 'b t
      val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
      val from_list : (key * 'a) list -> 'a t
      val to_string : ?sep:string -> ('a -> string) -> 'a t -> string
    end
  module String_map :
    sig
      type key = string
      type 'a t = 'a Eliom_lib_base.String_map.t
      val empty : 'a t
      val is_empty : 'a t -> bool
      val mem : key -> 'a t -> bool
      val add : key -> 'a -> 'a t -> 'a t
      val singleton : key -> 'a -> 'a t
      val remove : key -> 'a t -> 'a t
      val merge :
        (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
      val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
      val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
      val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val for_all : (key -> 'a -> bool) -> 'a t -> bool
      val exists : (key -> 'a -> bool) -> 'a t -> bool
      val filter : (key -> 'a -> bool) -> 'a t -> 'a t
      val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
      val cardinal : 'a t -> int
      val bindings : 'a t -> (key * 'a) list
      val min_binding : 'a t -> key * 'a
      val max_binding : 'a t -> key * 'a
      val choose : 'a t -> key * 'a
      val split : key -> 'a t -> 'a t * 'a option * 'a t
      val find : key -> 'a t -> 'a
      val map : ('a -> 'b) -> 'a t -> 'b t
      val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
      val from_list : (key * 'a) list -> 'a t
      val to_string : ?sep:string -> ('a -> string) -> 'a t -> string
    end
  type pos = Lexing.position * Lexing.position
  val pos_to_string : pos -> string
  type file_info = Ocsigen_extensions.file_info
  val string_escape : string -> string
  val to_json : ?typ:'a Deriving_Json.t -> 'a -> string
  val of_json : ?typ:'a Deriving_Json.t -> string -> 'a
  val debug : ('a, unit, string, unit) Pervasives.format4 -> 'a
  val jsmarshal : 'a -> string
  module Lwt_log :
    sig
      type level =
        Lwt_log.level =
          Debug
        | Info
        | Notice
        | Warning
        | Error
        | Fatal
      type logger = Lwt_log.logger
      type section = Lwt_log.section
      val string_of_level : level -> string
      val level_of_string : string -> level option
      val load_rules : ?fail_on_error:bool -> string -> unit
      val add_rule : string -> level -> unit
      val append_rule : string -> level -> unit
      val reset_rules : unit -> unit
      val log :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> level:level -> string -> unit Lwt.t
      val log_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger ->
        level:level -> ('a, unit, string, unit Lwt.t) format4 -> 'a
      val ign_log :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> level:level -> string -> unit
      val ign_log_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger ->
        level:level -> ('a, unit, string, unit) format4 -> 'a
      val debug :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> string -> unit Lwt.t
      val debug_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit Lwt.t) format4 -> 'a
      val ign_debug :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int -> ?logger:logger -> string -> unit
      val ign_debug_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit) format4 -> 'a
      val info :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> string -> unit Lwt.t
      val info_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit Lwt.t) format4 -> 'a
      val ign_info :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int -> ?logger:logger -> string -> unit
      val ign_info_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit) format4 -> 'a
      val notice :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> string -> unit Lwt.t
      val notice_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit Lwt.t) format4 -> 'a
      val ign_notice :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int -> ?logger:logger -> string -> unit
      val ign_notice_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit) format4 -> 'a
      val warning :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> string -> unit Lwt.t
      val warning_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit Lwt.t) format4 -> 'a
      val ign_warning :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int -> ?logger:logger -> string -> unit
      val ign_warning_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit) format4 -> 'a
      val error :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> string -> unit Lwt.t
      val error_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit Lwt.t) format4 -> 'a
      val ign_error :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int -> ?logger:logger -> string -> unit
      val ign_error_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit) format4 -> 'a
      val fatal :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> string -> unit Lwt.t
      val fatal_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit Lwt.t) format4 -> 'a
      val ign_fatal :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int -> ?logger:logger -> string -> unit
      val ign_fatal_f :
        ?exn:exn ->
        ?section:section ->
        ?location:string * int * int ->
        ?logger:logger -> ('a, unit, string, unit) format4 -> 'a
      module Section :
        sig
          type t = Lwt_log_core.section
          val make : string -> Lwt_log_core.section
          val name : Lwt_log_core.section -> string
          val main : Lwt_log_core.section
          val level : Lwt_log_core.section -> Lwt_log_core.level
          val set_level : Lwt_log_core.section -> Lwt_log_core.level -> unit
          val reset_level : Lwt_log_core.section -> unit
        end
      type template = Lwt_log.template
      val location_key : (string * int * int) Lwt.key
      exception Logger_closed
      val make :
        output:(section -> level -> string list -> unit Lwt.t) ->
        close:(unit -> unit Lwt.t) -> logger
      val close : logger -> unit Lwt.t
      val default : logger ref
      val broadcast : logger list -> logger
      val dispatch : (section -> level -> logger) -> logger
      val null : logger
      val render :
        buffer:Buffer.t ->
        template:template ->
        section:section -> level:level -> message:string -> unit
      type syslog_facility =
          [ `Auth
          | `Authpriv
          | `Console
          | `Cron
          | `Daemon
          | `FTP
          | `Kernel
          | `LPR
          | `Local0
          | `Local1
          | `Local2
          | `Local3
          | `Local4
          | `Local5
          | `Local6
          | `Local7
          | `Mail
          | `NTP
          | `News
          | `Security
          | `Syslog
          | `UUCP
          | `User ]
      val syslog :
        ?template:template ->
        ?paths:string list -> facility:syslog_facility -> unit -> logger
      val file :
        ?template:template ->
        ?mode:[ `Append | `Truncate ] ->
        ?perm:Unix.file_perm -> file_name:string -> unit -> logger Lwt.t
      val channel :
        ?template:template ->
        close_mode:[ `Close | `Keep ] ->
        channel:Lwt_io.output_channel -> unit -> logger
      val eliom : section
    end
  val make_cryptographic_safe_string : ?len:int -> unit -> string
end >>