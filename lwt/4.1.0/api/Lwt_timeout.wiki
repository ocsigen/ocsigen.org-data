=Module <<a_api_type | module Lwt_timeout >> =
<<pre class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|module>> <<span class="ocsforge_color_uid"|<<span class="ocsforge_color_uid"|Lwt_timeout>>>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="ocsforge_color_keyword"|sig>><<a_api text=".." | module Lwt_timeout >><<span class="ocsforge_color_keyword"|end>>>>~Cancelable timeouts~.

----
<<pre class="ocsforge_color odocwiki_code" id="TYPEt"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_name"|t>>>><<pre id="VALcreate" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|create>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|int <<span class="ocsforge_color_delimiter"| -> >> <<span class="ocsforge_color_delimiter"| ( >>unit <<span class="ocsforge_color_delimiter"| -> >> unit<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> <<a_api text="t" | type Lwt_timeout.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|~Lwt~_timeout~.create n f>> creates a new timeout object with duration <<span class="odocwiki_inlinecode"|n>>
    seconds~. <<span class="odocwiki_inlinecode"|f>> is the //action//~, a function to be called once the timeout
    expires~. <<span class="odocwiki_inlinecode"|f>> should not raise exceptions~.


    ~The timeout is not started until <<a_api | val Lwt_timeout.start >> is called on it~.
>>
<<pre id="VALstart" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|start>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_timeout.t >> <<span class="ocsforge_color_delimiter"| -> >> unit>>>><<div class="odocwiki_info"|~Starts the given timeout~.


    ~Starting a timeout that has already been started has the same effect as
    stopping it~, and then restarting it with its original duration~. ~So~,
    suppose you have <<span class="odocwiki_inlinecode"|timeout>> with a duration of three seconds~, which was
    started two seconds ago~. ~The next call to its action is scheduled for one
    second in the future~. ~Calling <<span class="odocwiki_inlinecode"|~Lwt~_timeout~.start timeout>> at this point
    cancels this upcoming action call~, and schedules a call three seconds from
    now~.
>>
<<pre id="VALstop" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|stop>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_timeout.t >> <<span class="ocsforge_color_delimiter"| -> >> unit>>>><<div class="odocwiki_info"|~Stops ~(cancels~) the given timeout~.
>>
<<pre id="VALchange" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|change>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_timeout.t >> <<span class="ocsforge_color_delimiter"| -> >> int <<span class="ocsforge_color_delimiter"| -> >> unit>>>><<div class="odocwiki_info"|~Changes the duration of the given timeout~.


    ~If the timeout has already been started~, it is stopped~, and restarted with
    its new duration~. ~This is similar to how <<a_api | val Lwt_timeout.start >> works on a
    timeout that has already been started~.
>>
<<pre id="VALset_exn_handler" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|set~_exn~_handler>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>exn <<span class="ocsforge_color_delimiter"| -> >> unit<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> unit>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|~Lwt~_timeout~.set~_exn~_handler f>> sets the handler to be used for exceptions
    raised by timeout actions~. ~Recall that actions are not allowed to raise
    exceptions~. ~If they do raise an exception <<span class="odocwiki_inlinecode"|exn>> despite this~, <<span class="odocwiki_inlinecode"|f exn>> is
    called~.


    ~The default behavior of <<span class="odocwiki_inlinecode"|f exn>>~, set by <<span class="odocwiki_inlinecode"|~Lwt~_timeout>> on program startup~, is
    to pass <<span class="odocwiki_inlinecode"|exn>> to <<span class="odocwiki_inlinecode"|!>><<a_api | val Lwt.async_exception_hook >>~. ~The default behavior of
    //that// is to terminate the process~.
>>
