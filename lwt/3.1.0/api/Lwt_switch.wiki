=Module <<a_api_type | module Lwt_switch >> =
<<pre class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|module>> <<span class="ocsforge_color_uid"|<<span class="ocsforge_color_uid"|Lwt_switch>>>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="ocsforge_color_keyword"|sig>><<a_api text=".." | module Lwt_switch >><<span class="ocsforge_color_keyword"|end>>>>~Lwt switches

----

~Switch has two goals~:


* being able to free multiple resources at the same time~,
* offer a better alternative than always returning an id to free
      some resource~.

    ~For example~, consider the following interface~:


    
<<code language='ocaml'|      type id

      val free : id -> unit Lwt.t

      val f : unit -> id Lwt.t
      val g : unit -> id Lwt.t
      val h : unit -> id Lwt.t
    >>



    ~Now you want to call <<span class="odocwiki_inlinecode"|f>>~, <<span class="odocwiki_inlinecode"|g>> and <<span class="odocwiki_inlinecode"|h>> in parallel~. ~You can
    simply do~:


    
<<code language='ocaml'|      lwt idf = f () and idg = g () and idh = h () in
      ...
    >>



    ~However~, one may want to handle possible failures of <<span class="odocwiki_inlinecode"|f ~(~)>>~, <<span class="odocwiki_inlinecode"|g
    ~(~)>> and <<span class="odocwiki_inlinecode"|h ~(~)>>~, and disable all allocated resources if one of
    these three threads fails~. ~This may be hard since you have to
    remember which one failed and which one returned correctly~.


    ~Now if we change the interface a little bit~:


    
<<code language='ocaml'|      val f : ?switch : Lwt_switch.t -> unit -> id Lwt.t
      val g : ?switch : Lwt_switch.t -> unit -> id Lwt.t
      val h : ?switch : Lwt_switch.t -> unit -> id Lwt.t
    >>



    the code becomes~:


    
<<code language='ocaml'|      Lwt_switch.with_switch (fun switch ->
        lwt idf = f ~switch ()
        and idg = g ~switch ()
        and idh = h ~switch () in
        ...
      )
    >>

<<pre class="ocsforge_color odocwiki_code" id="TYPEt"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_name"|t>>>><<div class="odocwiki_info"|~Type of switches~.
>>
<<pre id="VALcreate" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|create>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|unit <<span class="ocsforge_color_delimiter"| -> >> <<a_api text="t" | type Lwt_switch.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|create ~(~)>> creates a new switch~.
>>
<<pre id="VALwith_switch" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|with~_switch>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >><<a_api text="t" | type Lwt_switch.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|with~_switch fn>> is <<span class="odocwiki_inlinecode"|fn switch>>~, where <<span class="odocwiki_inlinecode"|switch>> is a fresh switch
      that is turned off when the callback thread finishes ~(whether it
      succeeds or fails~)~.
**Since** 2.6.0\\
>>
<<pre id="VALis_on" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|is~_on>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_switch.t >> <<span class="ocsforge_color_delimiter"| -> >> bool>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|is~_on switch>> returns <<span class="odocwiki_inlinecode"|true>> if the switch is currently on~, and
      <<span class="odocwiki_inlinecode"|false>> otherwise~.
>>
<<pre id="VALturn_off" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|turn~_off>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_switch.t >> <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|turn~_off switch>> turns off the switch~. ~It calls all registered
      hooks~, waits for all of them to terminate~, then returns~. ~If
      one of the hooks failed~, it will fail with the exception raised
      by the hook~. ~If the switch is already off~, it does nothing~.
>>
<<pre id="EXCEPTIONOff" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|exception>> <<span class="odocwiki_name"|Off>>>><<div class="odocwiki_info"|~Exception raised when trying to add a hook to a switch that is
      already off~.
>>
<<pre id="VALcheck" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|check>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_switch.t >> option <<span class="ocsforge_color_delimiter"| -> >> unit>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|check switch>> does nothing if <<span class="odocwiki_inlinecode"|switch>> is <<span class="odocwiki_inlinecode"|~None>> or contains an
      switch that is currently on~, and raises <<a_api | exception Lwt_switch.Off >> otherwise~.
>>
<<pre id="VALadd_hook" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|add~_hook>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_switch.t >> option <<span class="ocsforge_color_delimiter"| -> >> <<span class="ocsforge_color_delimiter"| ( >>unit <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> unit>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|add~_hook switch f>> registers <<span class="odocwiki_inlinecode"|f>> so it will be called when
      <<a_api | val Lwt_switch.turn_off >> is invoked~. ~It does nothing if <<span class="odocwiki_inlinecode"|switch>> is
      <<span class="odocwiki_inlinecode"|~None>>~. ~If <<span class="odocwiki_inlinecode"|switch>> contains an switch that is already off then
      <<a_api | exception Lwt_switch.Off >> is raised~.
>>
<<pre id="VALadd_hook_or_exec" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|add~_hook~_or~_exec>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api text="t" | type Lwt_switch.t >> option <<span class="ocsforge_color_delimiter"| -> >> <<span class="ocsforge_color_delimiter"| ( >>unit <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|add~_hook~_or~_exec switch f>> is the same as <<a_api | val Lwt_switch.add_hook >> except
      that if the switch is already off~, <<span class="odocwiki_inlinecode"|f>> is called immediately~.
>>
