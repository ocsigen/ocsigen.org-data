// Generated by js_of_ocaml 2.8.3
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("equal: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_is_printable(c){return +(c > 31 && c < 127)}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(!c[m[i]])c[m[i]] = f;
      return c}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function raw_array_copy(a)
     {var l=a.length,b=new Array(l);
      for(var i=0;i < l;i++)b[i] = a[i];
      return b}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,raw_array_copy(arguments))
                :caml_call_gen(f,[undefined])}}
    function caml_lessequal(x,y){return +(caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return +(caml_compare_val(x,y,false) < 0)}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~3) + 8;(i & 63) < 60;i += 4)buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_ml_flush(oc)
     {if(!oc.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(oc.buffer == "")return 0;
      if(oc.output)
       switch(oc.output.length)
        {case 2:oc.output(oc,oc.buffer);break;default:oc.output(oc.buffer)}
      oc.buffer = "";
      return 0}
    var file_inode=0;
    function unix_gettimeofday(){return new Date().getTime() / 1e3}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function MlFile(content)
     {this.data = content;
      this.inode = file_inode++;
      var now=unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now}
    MlFile.prototype
    =
    {truncate:function(){this.data = caml_create_string(0);this.modified()},
     modified:
     function(){var now=unix_time();this.atime = now;this.mtime = now}};
    function caml_ml_string_length(s){return s.l}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    var caml_current_dir="/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function MlDir()
     {this.content = {};
      this.inode = file_inode++;
      var now=unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now}
    MlDir.prototype
    =
    {exists:function(name){return this.content[name]?1:0},
     mk:function(name,c){this.content[name] = c},
     get:function(name){return this.content[name]},
     list:function(){var a=[];for(var n in this.content)a.push(n);return a},
     remove:function(name){delete this.content[name]}};
    var caml_root_dir=new MlDir();
    caml_root_dir.mk("",new MlDir());
    function caml_fs_content(path)
     {var dir=caml_root_dir;
      for(var i=0;i < path.length;i++)
       {if(!(dir.exists && dir.exists(path[i])))
         caml_raise_no_such_file(path.orig);
        dir = dir.get(path[i])}
      return dir}
    function caml_sys_is_directory(name)
     {var path=caml_make_path(name),dir=caml_fs_content(path);
      return dir instanceof MlDir?1:0}
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_fs_register(name,content)
     {var path=caml_make_path(name),dir=caml_root_dir;
      for(var i=0;i < path.length - 1;i++)
       {var d=path[i];
        if(!dir.exists(d))dir.mk(d,new MlDir());
        dir = dir.get(d);
        if(!(dir instanceof MlDir))
         caml_raise_sys_error(path.orig + " : file already exists")}
      var d=path[path.length - 1];
      if(dir.exists(d))
       caml_raise_sys_error(path.orig + " : file already exists");
      if(content instanceof MlDir)
       dir.mk(d,content);
      else
       if(content instanceof MlFile)
        dir.mk(d,content);
       else
        if(content instanceof MlString)
         dir.mk(d,new MlFile(content));
        else
         if(content instanceof Array)
          dir.mk(d,new MlFile(caml_string_of_array(content)));
         else
          if(content.toString)
           {var mlstring=caml_new_string(content.toString());
            dir.mk(d,new MlFile(mlstring))}
          else
           caml_invalid_argument("caml_fs_register");
      return 0}
    function caml_sys_file_exists(name)
     {var dir=caml_root_dir,path=caml_make_path(name),auto_load,pos;
      for(var i=0;i < path.length;i++)
       {if(dir.auto){auto_load = dir.auto;pos = i}
        if(!(dir.exists && dir.exists(path[i])))
         return auto_load?auto_load(path,pos):0;
        dir = dir.get(path[i])}
      return 1}
    function caml_sys_open_internal(idx,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?caml_ml_string_length(file.data):0;
      info.flags = flags;
      caml_global_data.fds[idx] = info;
      caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      var name2=name.toString(),path=caml_make_path(name);
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name2 + " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name2 + " : flags Open_text and Open_binary are not compatible");
      if(caml_sys_file_exists(name))
       {if(caml_sys_is_directory(name))
         caml_raise_sys_error(name2 + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(name2 + " : file already exists");
        var
         idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0,
         file=caml_fs_content(path);
        if(f.truncate)file.truncate();
        return caml_sys_open_internal(idx + 1,file,f)}
      else
       if(f.create)
        {var idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
         caml_fs_register(name,caml_create_string(0));
         var file=caml_fs_content(path);
         return caml_sys_open_internal(idx + 1,file,f)}
       else
        caml_raise_no_such_file(name)}
    caml_sys_open_internal(0,new MlFile(caml_create_string(0)));
    caml_sys_open_internal(1,new MlFile(caml_create_string(0)));
    caml_sys_open_internal(2,new MlFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      return {file:data.file,offset:data.offset,fd:fd,opened:true,refill:null}}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    var caml_ml_out_channels=new Array();
    function caml_std_output(chan,s)
     {var
       str=caml_new_string(s),
       slen=caml_ml_string_length(str),
       clen=caml_ml_string_length(chan.file.data),
       offset=chan.offset;
      if(offset + slen >= clen)
       {var new_str=caml_create_string(offset + slen);
        caml_blit_string(chan.file.data,0,new_str,0,clen);
        caml_blit_string(str,0,new_str,offset,slen);
        chan.file.data = new_str}
      chan.offset += slen;
      chan.file.modified();
      return 0}
    function caml_ml_open_descriptor_out(fd)
     {var output;
      switch(fd)
       {case 1:output = js_print_stdout;break;
        case 2:output = js_print_stderr;break;
        default:output = caml_std_output}
      var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         buffer:"",
         output:output};
      caml_ml_out_channels[channel.fd] = channel;
      return channel}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_out_channels.length;c++)
       if(caml_ml_out_channels[c] && caml_ml_out_channels[c].opened)
        l = [0,caml_ml_out_channels[c],l];
      return l}
    function caml_ml_output(oc,buffer,offset,len)
     {if(!oc.opened)caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       oc.buffer += jsstring;
      else
       {oc.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(oc);
        oc.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(oc,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(oc,s,0,1);
      return 0}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    if(!Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 65535) * y | 0};
    var caml_mul=Math.imul;
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_is_block(x){return +(x instanceof Array)}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    var caml_oo_last_id=0;
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error)
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     s=caml_new_string("Buffer.add: cannot grow buffer"),
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _j_=caml_new_string("output_substring"),
     _i_=caml_new_string("%.12g"),
     _h_=caml_new_string("."),
     _f_=caml_new_string("true"),
     _g_=caml_new_string("false"),
     _d_=caml_new_string("Pervasives.Exit"),
     _l_=caml_new_string("Array.init"),
     _n_=caml_new_string("Array.Bottom"),
     _r_=caml_new_string("\\b"),
     _s_=caml_new_string("\\t"),
     _t_=caml_new_string("\\n"),
     _u_=caml_new_string("\\r"),
     _q_=caml_new_string("\\\\"),
     _p_=caml_new_string("\\'"),
     _A_=caml_new_string("String.blit / Bytes.blit_string"),
     _y_=caml_new_string("Bytes.blit"),
     _v_=caml_new_string("String.sub / Bytes.sub"),
     _D_=caml_new_string(""),
     _F_=caml_new_string("Sys.Break"),
     _G_=caml_new_string("Queue.Empty"),
     _I_=caml_new_string("CamlinternalLazy.Undefined"),
     _L_=caml_new_string("Buffer.add_substring/add_subbytes"),
     _ab_=caml_new_string("%c"),
     _ac_=caml_new_string("%s"),
     _ad_=caml_new_string("%i"),
     _ae_=caml_new_string("%li"),
     _af_=caml_new_string("%ni"),
     _ag_=caml_new_string("%Li"),
     _ah_=caml_new_string("%f"),
     _ai_=caml_new_string("%B"),
     _aj_=caml_new_string("%{"),
     _ak_=caml_new_string("%}"),
     _al_=caml_new_string("%("),
     _am_=caml_new_string("%)"),
     _an_=caml_new_string("%a"),
     _ao_=caml_new_string("%t"),
     _ap_=caml_new_string("%?"),
     _aq_=caml_new_string("%r"),
     _ar_=caml_new_string("%_r"),
     _av_=[0,caml_new_string("camlinternalFormat.ml"),816,23],
     _aG_=[0,caml_new_string("camlinternalFormat.ml"),780,21],
     _ay_=[0,caml_new_string("camlinternalFormat.ml"),781,21],
     _aH_=[0,caml_new_string("camlinternalFormat.ml"),784,21],
     _az_=[0,caml_new_string("camlinternalFormat.ml"),785,21],
     _aI_=[0,caml_new_string("camlinternalFormat.ml"),788,19],
     _aA_=[0,caml_new_string("camlinternalFormat.ml"),789,19],
     _aJ_=[0,caml_new_string("camlinternalFormat.ml"),792,22],
     _aB_=[0,caml_new_string("camlinternalFormat.ml"),793,22],
     _aK_=[0,caml_new_string("camlinternalFormat.ml"),797,30],
     _aC_=[0,caml_new_string("camlinternalFormat.ml"),798,30],
     _aE_=[0,caml_new_string("camlinternalFormat.ml"),802,26],
     _aw_=[0,caml_new_string("camlinternalFormat.ml"),803,26],
     _aF_=[0,caml_new_string("camlinternalFormat.ml"),812,28],
     _ax_=[0,caml_new_string("camlinternalFormat.ml"),813,28],
     _aD_=[0,caml_new_string("camlinternalFormat.ml"),817,23],
     _bD_=caml_new_string("%u"),
     _bB_=[0,caml_new_string("camlinternalFormat.ml"),1449,4],
     _bC_=caml_new_string("Printf: bad conversion %["),
     _bE_=[0,caml_new_string("camlinternalFormat.ml"),1517,39],
     _bF_=[0,caml_new_string("camlinternalFormat.ml"),1540,31],
     _bG_=[0,caml_new_string("camlinternalFormat.ml"),1541,31],
     _bH_=caml_new_string("Printf: bad conversion %_"),
     _bJ_=caml_new_string("@{"),
     _bK_=caml_new_string("@["),
     _bM_=caml_new_string("@{"),
     _bN_=caml_new_string("@["),
     _bv_=[0,caml_new_string("'"),[0,caml_new_string("'"),0]],
     _bt_=caml_new_string("nan"),
     _bu_=caml_new_string("."),
     _br_=caml_new_string("neg_infinity"),
     _bs_=caml_new_string("infinity"),
     _bl_=caml_new_string("%.12g"),
     _a__=[0,caml_new_string("%"),[0,caml_new_string("d"),0]],
     _a$_=[0,caml_new_string("%+"),[0,caml_new_string("d"),0]],
     _ba_=[0,caml_new_string("% "),[0,caml_new_string("d"),0]],
     _bb_=[0,caml_new_string("%"),[0,caml_new_string("i"),0]],
     _bc_=[0,caml_new_string("%+"),[0,caml_new_string("i"),0]],
     _bd_=[0,caml_new_string("% "),[0,caml_new_string("i"),0]],
     _be_=[0,caml_new_string("%"),[0,caml_new_string("x"),0]],
     _bf_=[0,caml_new_string("%#"),[0,caml_new_string("x"),0]],
     _bg_=[0,caml_new_string("%"),[0,caml_new_string("X"),0]],
     _bh_=[0,caml_new_string("%#"),[0,caml_new_string("X"),0]],
     _bi_=[0,caml_new_string("%"),[0,caml_new_string("o"),0]],
     _bj_=[0,caml_new_string("%#"),[0,caml_new_string("o"),0]],
     _bk_=[0,caml_new_string("%"),[0,caml_new_string("u"),0]],
     _aW_=caml_new_string("%d"),
     _aX_=caml_new_string("%+d"),
     _aY_=caml_new_string("% d"),
     _aZ_=caml_new_string("%i"),
     _a0_=caml_new_string("%+i"),
     _a1_=caml_new_string("% i"),
     _a2_=caml_new_string("%x"),
     _a3_=caml_new_string("%#x"),
     _a4_=caml_new_string("%X"),
     _a5_=caml_new_string("%#X"),
     _a6_=caml_new_string("%o"),
     _a7_=caml_new_string("%#o"),
     _a8_=caml_new_string("%u"),
     _aV_=[0,caml_new_string('"'),[0,caml_new_string('"'),0]],
     _U_=caml_new_string("@]"),
     _V_=caml_new_string("@}"),
     _W_=caml_new_string("@?"),
     _X_=caml_new_string("@\n"),
     _Y_=caml_new_string("@."),
     _Z_=caml_new_string("@@"),
     ___=caml_new_string("@%"),
     _$_=caml_new_string("@"),
     _aL_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bT_=caml_new_string(""),
     _bU_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _b__=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _b$_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _b4_=caml_new_string("Raised at"),
     _b5_=caml_new_string("Re-raised at"),
     _b6_=caml_new_string("Raised by primitive operation at"),
     _b7_=caml_new_string("Called from"),
     _b8_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [11,
           caml_new_string('", line '),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(", characters "),
             [4,0,0,0,[12,45,[4,0,0,0,0]]]]]]]]],
       caml_new_string('%s file "%s", line %d, characters %d-%d')],
     _b9_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bZ_=caml_new_string("Out of memory"),
     _b0_=caml_new_string("Stack overflow"),
     _b1_=caml_new_string("Pattern matching failed"),
     _b2_=caml_new_string("Assertion failed"),
     _b3_=caml_new_string("Undefined recursive module"),
     _bV_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bW_=caml_new_string(""),
     _bX_=caml_new_string(""),
     _bY_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bS_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bQ_=[0,[3,0,0],caml_new_string("%S")],
     _bR_=caml_new_string("_"),
     _cl_=caml_new_string("Random.int"),
     _ce_=caml_new_string("x"),
     _cm_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _cv_=[3,0,3],
     _cw_=caml_new_string("."),
     _ct_=caml_new_string(">"),
     _cu_=caml_new_string("</"),
     _cr_=caml_new_string(">"),
     _cs_=caml_new_string("<"),
     _cq_=caml_new_string("\n"),
     _co_=caml_new_string("Format.Empty_queue"),
     _cp_=[0,caml_new_string("")],
     _cy_=caml_new_string("Lwt_sequence.Empty"),
     _cF_=[0,caml_new_string("src/core/lwt.ml"),667,20],
     _cG_=[0,caml_new_string("src/core/lwt.ml"),670,8],
     _cE_=[0,caml_new_string("src/core/lwt.ml"),508,8],
     _cD_=[0,caml_new_string("src/core/lwt.ml"),497,9],
     _cC_=caml_new_string("Lwt.wakeup_result"),
     _cB_=caml_new_string("Fatal error: exception "),
     _cA_=caml_new_string("Lwt.Canceled"),
     _cK_=caml_new_string("Js.Error"),
     _cL_=caml_new_string("Dom_html.Canvas_not_available"),
     _cO_=caml_new_string("Exception during Lwt.async: ");
    function _a_(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,_a_(rest)];
         case 1:var rest$0=param[1];return [1,_a_(rest$0)];
         case 2:var rest$1=param[1];return [2,_a_(rest$1)];
         case 3:var rest$2=param[1];return [3,_a_(rest$2)];
         case 4:var rest$3=param[1];return [4,_a_(rest$3)];
         case 5:var rest$4=param[1];return [5,_a_(rest$4)];
         case 6:var rest$5=param[1];return [6,_a_(rest$5)];
         case 7:var rest$6=param[1];return [7,_a_(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,_a_(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];return [9,ty1,ty1,_a_(rest$8)];
         case 10:var rest$9=param[1];return [10,_a_(rest$9)];
         case 11:var rest$10=param[1];return [11,_a_(rest$10)];
         case 12:var rest$11=param[1];return [12,_a_(rest$11)];
         case 13:var rest$12=param[1];return [13,_a_(rest$12)];
         default:var rest$13=param[1];return [14,_a_(rest$13)]}}
    function _b_(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,_b_(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,_b_(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,_b_(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,_b_(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,_b_(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,_b_(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,_b_(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,_b_(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];return [8,ty,_b_(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,_b_(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,_b_(rest$9,fmtty2)];
         case 11:var rest$10=fmtty1[1];return [11,_b_(rest$10,fmtty2)];
         case 12:var rest$11=fmtty1[1];return [12,_b_(rest$11,fmtty2)];
         case 13:var rest$12=fmtty1[1];return [13,_b_(rest$12,fmtty2)];
         default:var rest$13=fmtty1[1];return [14,_b_(rest$13,fmtty2)]}}
    function _c_(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,_c_(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,_c_(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];return [2,pad,_c_(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];return [3,pad$0,_c_(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,_c_(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,_c_(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,_c_(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,_c_(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,_c_(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,_c_(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,_c_(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];return [11,str,_c_(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];return [12,chr,_c_(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,_c_(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,_c_(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,_c_(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,_c_(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,_c_(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,_c_(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,_c_(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,_c_(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,_c_(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,_c_(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];return [23,ign,_c_(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,_c_(rest$23,fmt2)]}}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_set_oo_id([248,_d_,0]);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    var max_int=2147483647;
    function _e_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_string(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_gh_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_string(s){return output_string(stderr,s)}
    var exit_function=[0,flush_all];
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function _k_(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_gf_=l - 1 | 0,_ge_=1;
        if(!(_gf_ < 1))
         {var i=_ge_;
          for(;;)
           {res[i + 1] = caml_call1(f,i);
            var _gg_=i + 1 | 0;
            if(_gf_ !== i){var i=_gg_;continue}
            break}}
        return res}
      return invalid_arg(_l_)}
    function _m_(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_gc_=l - 1 | 0,_gb_=1;
      if(!(_gc_ < 1))
       {var i=_gb_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _gd_=i + 1 | 0;
          if(_gc_ !== i){var i=_gd_;continue}
          break}}
      return r}
    caml_set_oo_id([248,_n_,0]);
    function _o_(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function make(n,c)
     {var s=caml_create_string(n);caml_fill_string(s,0,n,c);return s}
    function _w_(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_string_length(b) - len | 0) < ofs))
         {var r=caml_create_string(len);
          caml_blit_string(b,ofs,r,0,len);
          return r}
      return invalid_arg(_v_)}
    function _x_(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_y_)}
    function _z_(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_A_)}
    function _B_(n,c){return make(n,c)}
    function _C_(sep,l)
     {if(l)
       {var tl=l[2],hd=l[1],num=[0,0],len=[0,0];
        _o_
         (function(s)
           {num[1]++;len[1] = len[1] + caml_ml_string_length(s) | 0;return 0},
          l);
        var
         r=
          caml_create_string
           (len[1] + caml_mul(caml_ml_string_length(sep),num[1] - 1 | 0) | 0);
        caml_blit_string(hd,0,r,0,caml_ml_string_length(hd));
        var pos=[0,caml_ml_string_length(hd)];
        _o_
         (function(s)
           {caml_blit_string(sep,0,r,pos[1],caml_ml_string_length(sep));
            pos[1] = pos[1] + caml_ml_string_length(sep) | 0;
            caml_blit_string(s,0,r,pos[1],caml_ml_string_length(s));
            pos[1] = pos[1] + caml_ml_string_length(s) | 0;
            return 0},
          tl);
        return r}
      return _D_}
    caml_set_oo_id([248,_F_,0]);
    var _H_=caml_set_oo_id([248,_G_,0]);
    caml_set_oo_id([248,_I_,0]);
    var _E_=16777211;
    function _J_(n)
     {var n$0=1 <= n?n:1,n$1=16777211 < n$0?_E_:n$0,s=caml_create_string(n$1);
      return [0,s,0,n$1,s]}
    function _K_(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(16777211 < new_len[1])
         {if(!((b[2] + more | 0) <= 16777211))throw [0,Failure,s];
          new_len[1] = _E_}
        var new_buffer=caml_create_string(new_len[1]);
        _x_(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function _M_(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)_K_(b,len);
      _z_(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var _N_=6;
    function _O_(init_size){return [0,0,caml_create_string(init_size)]}
    function _P_(buf,overhead)
     {var
       len=caml_ml_string_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _f$_=len < min_len?1:0;
      if(_f$_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_string(new_len);
        _x_(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _ga_=0}
      else
       var _ga_=_f$_;
      return _ga_}
    function _Q_(buf,c)
     {_P_(buf,1);
      caml_string_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function _R_(buf,s)
     {var str_len=caml_ml_string_length(s);
      _P_(buf,str_len);
      _z_(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function _S_(buf){return _w_(buf[2],0,buf[1])}
    function _T_(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _U_;
         case 1:return _V_;
         case 2:return _W_;
         case 3:return _X_;
         case 4:return _Y_;
         case 5:return _Z_;
         default:return ___}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _e_(_$_,_B_(1,c))}}
    function _aa_(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];_R_(buf,_ab_);var fmtty$0=rest;continue;
          case 1:
           var rest$0=fmtty$0[1];_R_(buf,_ac_);var fmtty$0=rest$0;continue;
          case 2:
           var rest$1=fmtty$0[1];_R_(buf,_ad_);var fmtty$0=rest$1;continue;
          case 3:
           var rest$2=fmtty$0[1];_R_(buf,_ae_);var fmtty$0=rest$2;continue;
          case 4:
           var rest$3=fmtty$0[1];_R_(buf,_af_);var fmtty$0=rest$3;continue;
          case 5:
           var rest$4=fmtty$0[1];_R_(buf,_ag_);var fmtty$0=rest$4;continue;
          case 6:
           var rest$5=fmtty$0[1];_R_(buf,_ah_);var fmtty$0=rest$5;continue;
          case 7:
           var rest$6=fmtty$0[1];_R_(buf,_ai_);var fmtty$0=rest$6;continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           _R_(buf,_aj_);
           _aa_(buf,sub_fmtty);
           _R_(buf,_ak_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           _R_(buf,_al_);
           _aa_(buf,sub_fmtty$0);
           _R_(buf,_am_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];_R_(buf,_an_);var fmtty$0=rest$9;continue;
          case 11:
           var rest$10=fmtty$0[1];_R_(buf,_ao_);var fmtty$0=rest$10;continue;
          case 12:
           var rest$11=fmtty$0[1];_R_(buf,_ap_);var fmtty$0=rest$11;continue;
          case 13:
           var rest$12=fmtty$0[1];_R_(buf,_aq_);var fmtty$0=rest$12;continue;
          default:
           var rest$13=fmtty$0[1];_R_(buf,_ar_);var fmtty$0=rest$13;continue}}
    function _as_(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,_as_(rest)];
         case 1:var rest$0=param[1];return [1,_as_(rest$0)];
         case 2:var rest$1=param[1];return [2,_as_(rest$1)];
         case 3:var rest$2=param[1];return [3,_as_(rest$2)];
         case 4:var rest$3=param[1];return [4,_as_(rest$3)];
         case 5:var rest$4=param[1];return [5,_as_(rest$4)];
         case 6:var rest$5=param[1];return [6,_as_(rest$5)];
         case 7:var rest$6=param[1];return [7,_as_(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,_as_(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,_as_(rest$8)];
         case 10:var rest$9=param[1];return [10,_as_(rest$9)];
         case 11:var rest$10=param[1];return [11,_as_(rest$10)];
         case 12:var rest$11=param[1];return [12,_as_(rest$11)];
         case 13:var rest$12=param[1];return [13,_as_(rest$12)];
         default:var rest$13=param[1];return [14,_as_(rest$13)]}}
    function _at_(param)
     {if(typeof param === "number")
       {var
         _fN_=function(param){return 0},
         _fO_=function(param){return 0},
         _fP_=function(param){return 0};
        return [0,function(param){return 0},_fP_,_fO_,_fN_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=_at_(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _fQ_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_fQ_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=_at_(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _fR_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _fR_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=_at_(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _fS_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _fS_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=_at_(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _fT_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _fT_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=_at_(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _fU_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _fU_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=_at_(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _fV_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _fV_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=_at_(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _fW_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _fW_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=_at_(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _fX_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _fX_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=_at_(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _fY_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _fY_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=_at_(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=_au_(_as_(ty1),ty2),
           match$9=_at_(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _fZ_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _f0_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _f1_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _f1_,
                  _f0_,
                  _fZ_];
         case 10:
          var
           rest$9=param[1],
           match$10=_at_(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _f2_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _f2_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=_at_(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _f3_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _f3_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=_at_(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _f4_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _f4_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=_at_(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _f5_=function(param){caml_call1(de$12,0);return 0},
           _f6_=function(param){caml_call1(ed$12,0);return 0},
           _f7_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _f7_,
                  _f6_,
                  _f5_];
         default:
          var
           rest$13=param[1],
           match$14=_at_(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _f8_=function(param){caml_call1(de$13,0);return 0},
           _f9_=function(param){caml_call1(ed$13,0);return 0},
           _f__=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _f__,
                  _f9_,
                  _f8_]}}
    function _au_(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_av_]}
      else
       switch(ty1[0])
        {case 0:
          var _fu_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,_au_(_fu_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _fv_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,_au_(_fv_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _fw_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,_au_(_fw_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _fx_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,_au_(_fx_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _fy_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,_au_(_fy_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _fz_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,_au_(_fz_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _fA_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,_au_(_fA_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _fB_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,_au_(_fB_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _fC_=ty1[2],_fD_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_fE_=_au_(_fC_,rest2$7);
              return [8,_au_(_fD_,ty2),_fE_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_aE_];
          break;
         case 9:
          var _fF_=ty1[3],_fG_=ty1[2],_fH_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=_au_(_as_(_fG_),ty21),
               match$0=_at_(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_fH_,ty22,_au_(_fF_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_aF_];
          break;
         case 10:
          var _fI_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,_au_(_fI_,rest2$9)]}
          throw [0,Assert_failure,_aG_];
         case 11:
          var _fJ_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,_au_(_fJ_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_aH_];
          break;
         case 12:
          var _fK_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,_au_(_fK_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_aI_];
          break;
         case 13:
          var _fL_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,_au_(_fL_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_aJ_];
          break;
         default:
          var _fM_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,_au_(_fM_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_aK_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ay_];
        case 1:throw [0,Assert_failure,_az_];
        case 2:throw [0,Assert_failure,_aA_];
        case 3:throw [0,Assert_failure,_aB_];
        case 4:throw [0,Assert_failure,_aC_];
        case 5:throw [0,Assert_failure,_aw_];
        case 6:throw [0,Assert_failure,_ax_];
        default:throw [0,Assert_failure,_aD_]}}
    var _aM_=caml_set_oo_id([248,_aL_,0]);
    function _aN_(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw _aM_}}
    function _aO_(pad,prec,fmtty)
     {var match=_aN_(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _ft_=match[2];
        if(typeof _ft_ !== "number" && 2 === _ft_[0])
         {var rest$0=_ft_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw _aM_}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function _aQ_(ign,fmt,fmtty)
     {var match=_aP_(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function _aP_(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=_aP_(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=_aP_(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _e3_=_aN_(pad,fmtty),
           _e4_=_e3_[2],
           _e5_=_e3_[1];
          if(typeof _e4_ !== "number" && 1 === _e4_[0])
           {var
             fmtty_rest$1=_e4_[1],
             match$1=_aP_(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_e5_,fmt$2],fmtty$2]}
          throw _aM_;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _e6_=_aN_(pad$0,fmtty),
           _e7_=_e6_[2],
           _e8_=_e6_[1];
          if(typeof _e7_ !== "number" && 1 === _e7_[0])
           {var
             fmtty_rest$2=_e7_[1],
             match$2=_aP_(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_e8_,fmt$3],fmtty$3]}
          throw _aM_;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _e9_=_aO_(pad$1,prec,fmtty),
           _e__=_e9_[3],
           _e$_=_e9_[2],
           _fa_=_e9_[1];
          if(typeof _e__ !== "number" && 2 === _e__[0])
           {var
             fmtty_rest$3=_e__[1],
             match$3=_aP_(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_fa_,_e$_,fmt$4],fmtty$4]}
          throw _aM_;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _fb_=_aO_(pad$2,prec$0,fmtty),
           _fc_=_fb_[3],
           _fd_=_fb_[2],
           _fe_=_fb_[1];
          if(typeof _fc_ !== "number" && 3 === _fc_[0])
           {var
             fmtty_rest$4=_fc_[1],
             match$4=_aP_(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_fe_,_fd_,fmt$5],fmtty$5]}
          throw _aM_;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _ff_=_aO_(pad$3,prec$1,fmtty),
           _fg_=_ff_[3],
           _fh_=_ff_[2],
           _fi_=_ff_[1];
          if(typeof _fg_ !== "number" && 4 === _fg_[0])
           {var
             fmtty_rest$5=_fg_[1],
             match$5=_aP_(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_fi_,_fh_,fmt$6],fmtty$6]}
          throw _aM_;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _fj_=_aO_(pad$4,prec$2,fmtty),
           _fk_=_fj_[3],
           _fl_=_fj_[2],
           _fm_=_fj_[1];
          if(typeof _fk_ !== "number" && 5 === _fk_[0])
           {var
             fmtty_rest$6=_fk_[1],
             match$6=_aP_(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_fm_,_fl_,fmt$7],fmtty$7]}
          throw _aM_;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _fn_=_aO_(pad$5,prec$3,fmtty),
           _fo_=_fn_[3],
           _fp_=_fn_[2],
           _fq_=_fn_[1];
          if(typeof _fo_ !== "number" && 6 === _fo_[0])
           {var
             fmtty_rest$7=_fo_[1],
             match$7=_aP_(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_fq_,_fp_,fmt$8],fmtty$8]}
          throw _aM_;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=_aP_(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=_aP_(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=_aP_(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=_aP_(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))throw _aM_;
            var
             match$12=_aP_(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _fr_=[0,_a_(sub_fmtty1)];
            if(caml_notequal([0,_a_(sub_fmtty$1)],_fr_))throw _aM_;
            var
             match$13=_aP_(fmt_rest$13,_a_(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=_aP_(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=_aP_(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=_aP_(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=_aP_(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=_aP_(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=_aP_(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=_aP_(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=_aP_(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=_aP_(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=_aP_(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return _aQ_(ign,rest,fmtty);
             case 1:return _aQ_(ign,rest,fmtty);
             case 2:return _aQ_(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=_aP_(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw _aM_;
             default:return _aQ_(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return _aQ_(ign,rest,fmtty);
             case 1:return _aQ_(ign,rest,fmtty);
             case 2:return _aQ_(ign,rest,fmtty);
             case 3:return _aQ_(ign,rest,fmtty);
             case 4:return _aQ_(ign,rest,fmtty);
             case 5:return _aQ_(ign,rest,fmtty);
             case 6:return _aQ_(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return _aQ_([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _fs_=_aR_(sub_fmtty$3,rest,fmtty),
               match$27=_fs_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_fs_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return _aQ_(ign,rest,fmtty);
             default:return _aQ_(ign,rest,fmtty)}
         }
      throw _aM_}
    function _aR_(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,_aP_(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=_aR_(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=_aR_(sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=_aR_(sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=_aR_(sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=_aR_(sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=_aR_(sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=_aR_(sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=_aR_(sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))throw _aM_;
            var
             match$8=_aR_(sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _e1_=[0,_a_(sub1_fmtty)];
            if(caml_notequal([0,_a_(sub1_fmtty$0)],_e1_))throw _aM_;
            var _e2_=[0,_a_(sub2_fmtty$1)];
            if(caml_notequal([0,_a_(sub2_fmtty$2)],_e2_))throw _aM_;
            var
             sub_fmtty$0=_au_(_as_(sub1_fmtty),sub2_fmtty$1),
             match$9=_at_(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=_aR_(_a_(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,_as_(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=_aR_(sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=_aR_(sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=_aR_(sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=_aR_(sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw _aM_}
    function _aS_(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _e0_=2 === padty$0?48:32,res=make(width$0,_e0_);
      switch(padty$0)
       {case 0:_z_(str,0,res,0,len);break;
        case 1:_z_(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_string_set(res,0,caml_string_get(str,0));
             _z_(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_string_set(res,1,caml_string_get(str,1));
                _z_(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)_z_(str,0,res,width$0 - len | 0,len)}}
      return res}
    function _aT_(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_string_set(res$1,1,caml_string_get(str,1));
                   _z_(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_string_set(res$0,0,c);
            _z_(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         _z_(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function _aU_(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _eX_=0;
        else
         {var
           c$1=caml_string_unsafe_get(str,i$1),
           switch$0=
            14 <= c$1
             ?34 === c$1?1:92 === c$1?1:0
             :11 <= c$1?13 <= c$1?1:0:8 <= c$1?1:0;
          if(switch$0)
           var _eX_=1;
          else
           {if(caml_is_printable(c$1)){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
            var _eX_=1}}
        if(_eX_)
         {var n=[0,0],_eQ_=caml_ml_string_length(str) - 1 | 0,_eP_=0;
          if(!(_eQ_ < 0))
           {var i$0=_eP_;
            for(;;)
             {var
               c$0=caml_string_unsafe_get(str,i$0),
               switch$1=
                14 <= c$0
                 ?34 === c$0?1:92 === c$0?1:0
                 :11 <= c$0?13 <= c$0?1:0:8 <= c$0?1:0,
               _eV_=switch$1?2:caml_is_printable(c$0)?1:4;
              n[1] = n[1] + _eV_ | 0;
              var _eW_=i$0 + 1 | 0;
              if(_eQ_ !== i$0){var i$0=_eW_;continue}
              break}}
          if(n[1] === caml_ml_string_length(str))
           {var len=caml_ml_string_length(str),r=caml_create_string(len);
            caml_blit_string(str,0,r,0,len);
            var _eY_=r}
          else
           {var s=caml_create_string(n[1]);
            n[1] = 0;
            var _eS_=caml_ml_string_length(str) - 1 | 0,_eR_=0;
            if(!(_eS_ < 0))
             {var i=_eR_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i),_eT_=c - 34 | 0;
                if(58 < _eT_ >>> 0)
                 if(-20 <= _eT_)
                  var switch$2=1;
                 else
                  {var switcher=_eT_ + 34 | 0;
                   switch(switcher)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$3=1;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$3=1;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$3=1;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$3=1;
                      break;
                     default:var switch$2=1,switch$3=0}
                   if(switch$3)var switch$2=0}
                else
                 var
                  switcher$0=_eT_ - 1 | 0,
                  switch$2=
                   56 < switcher$0 >>> 0
                    ?(caml_string_unsafe_set(s,n[1],92),
                      n[1]++,
                      caml_string_unsafe_set(s,n[1],c),
                      0)
                    :1;
                if(switch$2)
                 if(caml_is_printable(c))
                  caml_string_unsafe_set(s,n[1],c);
                 else
                  {caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0)}
                n[1]++;
                var _eU_=i + 1 | 0;
                if(_eS_ !== i){var i=_eU_;continue}
                break}}
            var _eY_=s}
          var _eZ_=_eY_}
        else
         var _eZ_=str;
        return _C_(_eZ_,_aV_)}}
    function _a9_(iconv,c)
     {switch(iconv)
       {case 0:var seps=_a__;break;
        case 1:var seps=_a$_;break;
        case 2:var seps=_ba_;break;
        case 3:var seps=_bb_;break;
        case 4:var seps=_bc_;break;
        case 5:var seps=_bd_;break;
        case 6:var seps=_be_;break;
        case 7:var seps=_bf_;break;
        case 8:var seps=_bg_;break;
        case 9:var seps=_bh_;break;
        case 10:var seps=_bi_;break;
        case 11:var seps=_bj_;break;
        default:var seps=_bk_}
      return _C_(_B_(1,c),seps)}
    function _bm_(iconv,n)
     {switch(iconv)
       {case 0:var _eO_=_aW_;break;
        case 1:var _eO_=_aX_;break;
        case 2:var _eO_=_aY_;break;
        case 3:var _eO_=_aZ_;break;
        case 4:var _eO_=_a0_;break;
        case 5:var _eO_=_a1_;break;
        case 6:var _eO_=_a2_;break;
        case 7:var _eO_=_a3_;break;
        case 8:var _eO_=_a4_;break;
        case 9:var _eO_=_a5_;break;
        case 10:var _eO_=_a6_;break;
        case 11:var _eO_=_a7_;break;
        default:var _eO_=_a8_}
      return caml_format_int(_eO_,n)}
    function _bn_(iconv,n){return caml_format_int(_a9_(iconv,108),n)}
    function _bo_(iconv,n){return caml_format_int(_a9_(iconv,110),n)}
    function _bp_(iconv,n){return caml_int64_format(_a9_(iconv,76),n)}
    function _bq_(fconv,prec$0,x)
     {var prec$1=abs(prec$0);
      if(15 === fconv)
       var _eL_=_bl_;
      else
       {var prec=abs(prec$1);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          default:var symb=71}
        var buf=_O_(16);
        _Q_(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:_Q_(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:_Q_(buf,32);break
          }
        _Q_(buf,46);
        _R_(buf,caml_new_string("" + prec));
        _Q_(buf,symb);
        var _eL_=_S_(buf)}
      var str=caml_format_float(_eL_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_br_:_bs_;
        if(4 <= match$0)return _bt_;
        var i=0;
        for(;;)
         {if(i === len)
           var _eN_=0;
          else
           {var
             match=caml_string_get(str,i),
             _eM_=match - 46 | 0,
             switch$0=
              23 < _eM_ >>> 0?55 === _eM_?1:0:21 < (_eM_ - 1 | 0) >>> 0?1:0;
            if(!switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            var _eN_=1}
          return _eN_?str:_e_(str,_bu_)}}
      return str}
    function _bz_(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return _bw_(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=_aT_(p,caml_call2(trans,iconv,x));
                    return _bw_(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=_aT_(p,caml_call2(trans,iconv,x));
          return _bw_(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _eI_=pad[2],_eJ_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=_aS_(_eJ_,_eI_,caml_call2(trans,iconv,x));
                      return _bw_(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var str=_aS_(_eJ_,_eI_,_aT_(p,caml_call2(trans,iconv,x)));
                      return _bw_(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var str=_aS_(_eJ_,_eI_,_aT_(p$0,caml_call2(trans,iconv,x)));
            return _bw_(k,o,[4,acc,str],fmt)}}
        var _eK_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=_aS_(_eK_,w,caml_call2(trans,iconv,x));
                    return _bw_(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var str=_aS_(_eK_,w,_aT_(p,caml_call2(trans,iconv,x)));
                    return _bw_(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var str=_aS_(_eK_,w,_aT_(p$1,caml_call2(trans,iconv,x)));
          return _bw_(k,o,[4,acc,str],fmt)}}}
    function _by_(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return _bw_(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,_aS_(padty,width,caml_call1(trans,x))];
            return _bw_(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,_aS_(padty$0,w,caml_call1(trans,x))];
          return _bw_(k,o,new_acc,fmt)}}}
    function _cS_(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return _bw_(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(39 === c)
              var _eH_=_p_;
             else
              if(92 === c)
               var _eH_=_q_;
              else
               {if(14 <= c)
                 var switch$0=0;
                else
                 switch(c)
                  {case 8:var _eH_=_r_,switch$0=1;break;
                   case 9:var _eH_=_s_,switch$0=1;break;
                   case 10:var _eH_=_t_,switch$0=1;break;
                   case 13:var _eH_=_u_,switch$0=1;break;
                   default:var switch$0=0}
                if(!switch$0)
                 if(caml_is_printable(c))
                  {var s=caml_create_string(1);
                   caml_string_unsafe_set(s,0,c);
                   var _eH_=s}
                 else
                  {var s$0=caml_create_string(4);
                   caml_string_unsafe_set(s$0,0,92);
                   caml_string_unsafe_set(s$0,1,48 + (c / 100 | 0) | 0);
                   caml_string_unsafe_set
                    (s$0,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                   caml_string_unsafe_set(s$0,3,48 + (c % 10 | 0) | 0);
                   var _eH_=s$0}}
             var new_acc=[4,acc$0,_C_(_eH_,_bv_)];
             return _bw_(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return _by_(k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return _by_(k$0,o,acc$0,rest$2,pad$0,_aU_);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return _bz_(k$0,o,acc$0,rest$3,pad$1,prec,_bm_,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return _bz_(k$0,o,acc$0,rest$4,pad$2,prec$0,_bn_,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return _bz_(k$0,o,acc$0,rest$5,pad$3,prec$1,_bo_,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return _bz_(k$0,o,acc$0,rest$6,pad$4,prec$2,_bp_,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=_bq_(fconv,_N_,x);
                         return _bw_(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=_bq_(fconv,p,x);
                         return _bw_(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=_bq_(fconv,p,x);
               return _bw_(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _eC_=pad$5[2],_eD_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var str=_bq_(fconv,_N_,x),str$0=_aS_(_eD_,_eC_,str);
                           return _bw_(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=_aS_(_eD_,_eC_,_bq_(fconv,p,x));
                           return _bw_(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=_aS_(_eD_,_eC_,_bq_(fconv,p$0,x));
                 return _bw_(k$0,o,[4,acc$0,str],rest$7)}}
             var _eE_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var str=_bq_(fconv,_N_,x),str$0=_aS_(_eE_,w,str);
                         return _bw_(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=_aS_(_eE_,w,_bq_(fconv,p,x));
                         return _bw_(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=_aS_(_eE_,w,_bq_(fconv,p$1,x));
               return _bw_(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {var _eG_=b?_f_:_g_;return _bw_(k$0,o,[4,acc$0,_eG_],rest$8)};
          case 10:
           var rest$9=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=rest$9;
           continue;
          case 11:
           var
            rest$10=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=rest$10;
           continue;
          case 12:
           var
            rest$11=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=rest$11;
           continue;
          case 13:
           var rest$12=fmt$0[3],sub_fmtty=fmt$0[2],buf=_O_(16);
           _aa_(buf,sub_fmtty);
           var ty=_S_(buf);
           return function(str){return _bw_(k$0,o,[4,acc$0,ty],rest$12)};
          case 14:
           var rest$13=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=_a_(_as_(fmtty)),
              _eF_=_aP_(fmt$0,fmtty$0);
             if(typeof _eF_[2] === "number")
              {var fmt=_eF_[1];return _bw_(k$0,o,acc$0,_c_(fmt,rest$13))}
             throw _aM_};
          case 15:
           var rest$14=fmt$0[1];
           return function(f,x)
            {return _bw_
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$14)};
          case 16:
           var rest$15=fmt$0[1];
           return function(f){return _bw_(k$0,o,[6,acc$0,f],rest$15)};
          case 17:
           var
            rest$16=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=rest$16;
           continue;
          case 18:
           var _eA_=fmt$0[1];
           if(0 === _eA_[0])
            {var
              rest$17=fmt$0[2],
              match=_eA_[1],
              fmt$1=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return _bw_(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$17),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$1;
             continue}
           var
            rest$18=fmt$0[2],
            match$0=_eA_[1],
            fmt$2=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return _bw_(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$18),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$2;
           continue;
          case 19:throw [0,Assert_failure,_bB_];
          case 20:
           var rest$19=fmt$0[3],new_acc=[8,acc$0,_bC_];
           return function(param){return _bw_(k$0,o,new_acc,rest$19)};
          case 21:
           var rest$20=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bD_,n)];
             return _bw_(k$0,o,new_acc,rest$20)};
          case 22:
           var rest$21=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return _bw_(k$0,o,new_acc,rest$21)};
          case 23:
           var rest$22=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return _cQ_(counter$1,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return _cQ_(counter$2,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return _cQ_(counter$3,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 3:throw [0,Assert_failure,_bE_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return _cQ_(counter$4,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return _cQ_(counter$5,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return _cQ_(counter$6,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return _cQ_(counter$7,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return _cQ_(counter$8,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return _cQ_(counter$9,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return _cQ_(counter$10,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return _cQ_(counter$11,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return _cQ_(counter$12,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return _cR_(counter$15,k$0,o,acc$0,fmtty$0,rest$22)}
               return caml_trampoline_return
                       (_cR_,[0,k$0,o,acc$0,fmtty$0,rest$22]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return _cQ_(counter$13,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return _cQ_(counter$14,k$0,o,acc$0,rest$22)}
               return caml_trampoline_return(_cQ_,[0,k$0,o,acc$0,rest$22])}
          default:
           var
            rest$23=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _eB_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return _cP_(counter$0,k$0,o,acc$0,rest$23,arity,_eB_)}
           return caml_trampoline_return
                   (_cP_,[0,k$0,o,acc$0,rest$23,arity,_eB_])}}
    function _cR_(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;return _cQ_(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(_cQ_,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return _bx_(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=_au_(_as_(ty1),ty2);
          return function(param){return _bx_(k,o,acc,_b_(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_ez_){return _bx_(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return _bx_(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bF_];
         default:throw [0,Assert_failure,_bG_]}}
    function _cQ_(counter,k,o,acc,fmt)
     {var _ey_=[8,acc,_bH_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;return _cS_(counter$0,k,o,_ey_,fmt)}
      return caml_trampoline_return(_cS_,[0,k,o,_ey_,fmt])}
    function _cP_(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x){return _bA_(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _ex_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;return _cS_(counter$0,k,o,_ex_,rest)}
      return caml_trampoline_return(_cS_,[0,k,o,_ex_,rest])}
    function _bw_(k,o,acc,fmt){return caml_trampoline(_cS_(0,k,o,acc,fmt))}
    function _bx_(k,o,acc,fmtty,fmt)
     {return caml_trampoline(_cR_(0,k,o,acc,fmtty,fmt))}
    function _bA_(k,o,acc,rest,arity,f)
     {return caml_trampoline(_cP_(0,k,o,acc,rest,arity,f))}
    function _bI_(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1],s=_T_(fmting_lit);
           _bI_(o,p);
           return output_string(o,s);
          case 1:
           var _ev_=acc$0[2],_ew_=acc$0[1];
           if(0 === _ev_[0])
            {var acc$1=_ev_[1];
             _bI_(o,_ew_);
             output_string(o,_bJ_);
             var acc$0=acc$1;
             continue}
           var acc$2=_ev_[1];
           _bI_(o,_ew_);
           output_string(o,_bK_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];_bI_(o,p$2);return caml_call1(f,o);
          case 7:var p$3=acc$0[1];_bI_(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];_bI_(o,p$4);return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           _bI_(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           _bI_(o,p$1);
           return caml_ml_output_char(o,c)}}
    function _bL_(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1],s=_T_(fmting_lit);
           _bL_(b,p);
           return _M_(b,s);
          case 1:
           var _et_=acc$0[2],_eu_=acc$0[1];
           if(0 === _et_[0])
            {var acc$1=_et_[1];
             _bL_(b,_eu_);
             _M_(b,_bM_);
             var acc$0=acc$1;
             continue}
           var acc$2=_et_[1];
           _bL_(b,_eu_);
           _M_(b,_bN_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           _bL_(b,p$2);
           return _M_(b,caml_call1(f,0));
          case 7:var p$3=acc$0[1],acc$0=p$3;continue;
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];_bL_(b,p$4);return invalid_arg(msg);
          case 2:
          case 4:var s$0=acc$0[2],p$0=acc$0[1];_bL_(b,p$0);return _M_(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           _bL_(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)_K_(b,1);
           caml_string_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function _bO_(oc,fmt$0)
     {var fmt=fmt$0[1],_es_=0;
      return _bw_(function(o,acc){_bI_(o,acc);return 0},oc,_es_,fmt)}
    function _bP_(fmt$0)
     {var fmt=fmt$0[1];
      function k(param,acc){var b=_J_(64);_bL_(b,acc);return _w_(b[1],0,b[2])}
      return _bw_(k,0,0,fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var f=x[i$1 + 1];
      if(caml_obj_is_block(f))
       {if(caml_obj_tag(f) === 252)return caml_call1(_bP_(_bQ_),f);
        if(caml_obj_tag(f) === 253)
         {var s=caml_format_float(_i_,f),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return _e_(s,_h_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bR_}
      return caml_call1(_bP_(_bS_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bT_;
      var _eq_=other_fields(x,i + 1 | 0),_er_=field(x,i);
      return caml_call2(_bP_(_bU_),_er_,_eq_)}
    function fields(x)
     {var n=x.length - 1;
      if(2 < n >>> 0)
       {var _en_=other_fields(x,2),_eo_=field(x,1);
        return caml_call2(_bP_(_bV_),_eo_,_en_)}
      switch(n)
       {case 0:return _bW_;
        case 1:return _bX_;
        default:var _ep_=field(x,1);return caml_call1(_bP_(_bY_),_ep_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _el_=caml_call1(hd,x),_ek_=_el_}catch(_em_){var _ek_=0}
            if(_ek_){var s=_ek_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bZ_;
          if(x === Stack_overflow)return _b0_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (_bP_(locfmt),file,line,char$0,char$0 + 5 | 0,_b1_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (_bP_(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_b2_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (_bP_(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_b3_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _e_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function convert_raw_backtrace(rbckt)
     {try
       {var
         _eh_=
          [0,
           _m_
            (function(_ej_){return caml_convert_raw_backtrace_slot(_ej_)},
             rbckt)];
        return _eh_}
      catch(_ei_)
       {_ei_ = caml_wrap_exception(_ei_);
        if(_ei_[1] === Failure)return 0;
        throw _ei_}}
    function print_backtrace(outchan)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_ef_=a.length - 1 - 1 | 0,_ee_=0;
        if(!(_ef_ < 0))
         {var i=_ee_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[i + 1],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_b4_:_b5_:0 === i?_b6_:_b7_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              endchar=slot[5],
              startchar=slot[4],
              lineno=slot[3],
              filename=slot[2],
              is_raise=slot[1],
              _ec_=info(is_raise),
              match=
               [0,
                caml_call5(_bP_(_b8_),_ec_,filename,lineno,startchar,endchar)];
            else
             if(0 === slot[1])
              var _ed_=info(0),match=[0,caml_call1(_bP_(_b9_),_ed_)];
             else
              var match=0;
            if(match){var str=match[1];caml_call1(_bO_(outchan,_b__),str)}
            var _eg_=i + 1 | 0;
            if(_ef_ !== i){var i=_eg_;continue}
            break}}
        return 0}
      return _bO_(outchan,_b$_)}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    var s$0=[0,_cm_.slice(),0];
    function _cn_(bound)
     {if(!(1073741823 < bound))
       if(0 < bound)
        for(;;)
         {s$0[2] = (s$0[2] + 1 | 0) % 55 | 0;
          var
           _d$_=s$0[2],
           curval=caml_check_bound(s$0[1],_d$_)[_d$_ + 1],
           _ea_=(s$0[2] + 24 | 0) % 55 | 0,
           newval=
            caml_check_bound(s$0[1],_ea_)[_ea_ + 1]
            +
            (curval ^ (curval >>> 25 | 0) & 31)
            |
            0,
           r=newval & 1073741823,
           _eb_=s$0[2];
          caml_check_bound(s$0[1],_eb_)[_eb_ + 1] = r;
          var v=caml_mod(r,bound);
          if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
          return v}
      return invalid_arg(_cl_)}
    function add_queue(x,q)
     {var c=[0,[0,x,0]],_d__=q[1];
      if(_d__){var cell=_d__[1];q[1] = c;cell[2] = c;return 0}
      q[1] = c;
      q[2] = c;
      return 0}
    var Empty_queue=caml_set_oo_id([248,_co_,0]);
    function take_queue(q)
     {var _d9_=q[2];
      if(_d9_)
       {var match=_d9_[1],x=match[1],tl=match[2];
        q[2] = tl;
        if(0 === tl)q[1] = 0;
        return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[27])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       y=(state[6] - width | 0) + offset | 0,
       _d8_=state[8],
       real_indent=caml_lessequal(_d8_,y)?_d8_:y;
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return pp_output_spaces(state,state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return pp_output_spaces(state,width)}
    function pp_force_break_line(state)
     {var _d5_=state[2];
      if(_d5_)
       {var
         match=_d5_[1],
         width=match[2],
         bl_ty=match[1],
         _d6_=state[9] < width?1:0;
        if(_d6_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _d7_=0}
        else
         var _d7_=_d6_;
        return _d7_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[27]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _dU_=state[3];
          if(_dU_)
           {var
             match=_dU_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _dV_=state[2];
          if(_dV_){var ls=_dV_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _dW_=state[3];
          if(_dW_){var ls$0=_dW_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _dX_=state[2];
          if(_dX_)
           {var match$0=_dX_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _dY_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _dY_?pp_skip_token(state):_dY_;
         default:
          var _dZ_=state[5];
          if(_dZ_)
           {var
             tags=_dZ_[2],
             tag_name=_dZ_[1],
             marker=caml_call1(state[24],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_d0_=state[2];
          if(_d0_)
           {var match$1=_d0_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _d1_=state[3];
          if(_d1_)
           {var
             match$2=_d1_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _d2_=tabs$0[1];
            if(_d2_)
             {var x=_d2_[1];
              try
               {var _d3_=find(insertion_point,tabs$0[1]),x$0=_d3_}
              catch(_d4_)
               {_d4_ = caml_wrap_exception(_d4_);
                if(_d4_ !== Not_found)throw _d4_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[23],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _dQ_=state[27][2];
        if(_dQ_)
         {var
           match=_dQ_[1],
           x=match[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _dR_=size < 0?1:0,
           _dS_=_dR_?(state[13] - state[12] | 0) < state[9]?1:0:_dR_,
           _dT_=1 - _dS_;
          if(_dT_)
           {take_queue(state[27]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _dT_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _dO_=advance_loop(state);return _dO_}
      catch(_dP_)
       {_dP_ = caml_wrap_exception(_dP_);
        if(_dP_ === Empty_queue)return 0;
        throw _dP_}}
    var q_elem=[0,-1,_cp_,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _dK_=state[1];
      if(_dK_)
       {var
         match=_dK_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_dK_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _dM_=1 - ty,
             _dN_=
              _dM_?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):_dM_;
            return _dN_;
           case 1:
           case 2:
            var
             _dL_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _dL_
           }
        return 0}
      return 0}
    var blank_line=_B_(80,32);
    function default_pp_mark_open_tag(s){return _e_(_cs_,_e_(s,_cr_))}
    function default_pp_mark_close_tag(s){return _e_(_cu_,_e_(s,_ct_))}
    function default_pp_print_open_tag(_dJ_){return 0}
    function default_pp_print_close_tag(_dI_){return 0}
    function make_formatter(output,flush)
     {function i(_dH_){return 0}
      function h(_dG_){return 0}
      var pp_q=[0,0,0],sys_tok=[0,-1,_cv_,0];
      add_queue(sys_tok,pp_q);
      var
       sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom],
       ppf=
        [0,
         sys_scan_stack,
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max_int,
         _cw_,
         output,
         flush,
         h,
         i,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_q];
      ppf[19] = function(_dF_){return caml_call3(ppf[17],_cq_,0,1)};
      ppf[20]
      =
      function(n$1)
       {var n=n$1;
        for(;;)
         {var _dE_=0 < n?1:0;
          if(_dE_)
           {if(80 < n)
             {caml_call3(ppf[17],blank_line,0,80);
              var n$0=n - 80 | 0,n=n$0;
              continue}
            return caml_call3(ppf[17],blank_line,0,n)}
          return _dE_}};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _dD_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if(0 <= ofs)
                  if(0 <= len)
                   if(!((caml_ml_string_length(s) - len | 0) < ofs))
                    return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_j_)},
               _dD_)}
    var b=_J_(512),state=formatter_of_out_channel(stdout);
    formatter_of_out_channel(stderr);
    function _cx_(_dC_){return 0}
    make_formatter
     (function(s,offset,len)
       {var _dz_=offset < 0?1:0;
        if(_dz_)
         var _dA_=_dz_;
        else
         var
          _dB_=len < 0?1:0,
          _dA_=_dB_ || (caml_ml_string_length(s) < (offset + len | 0)?1:0);
        if(_dA_)invalid_arg(_L_);
        var new_position=b[2] + len | 0;
        if(b[3] < new_position)_K_(b,len);
        _z_(s,offset,b[1],b[2],len);
        b[2] = new_position;
        return 0},
      _cx_);
    var g=exit_function[1];
    exit_function[1]
    =
    function(param)
     {for(;;)
       {if(1 < state[14])
         {if(1 < state[14])
           {if(state[14] < state[15])
             {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
            state[14] = state[14] - 1 | 0}
          continue}
        state[13] = pp_infinity;
        advance_left(state);
        state[12] = 1;
        state[13] = 1;
        var _dx_=state[27];
        _dx_[1] = 0;
        _dx_[2] = 0;
        clear_scan_stack(state);
        state[2] = 0;
        state[3] = 0;
        state[4] = 0;
        state[5] = 0;
        state[10] = 0;
        state[14] = 0;
        state[9] = state[6];
        state[14] = state[14] + 1 | 0;
        var br_ty=3,indent=0;
        if(state[14] < state[15])
         {var tok$0=[0,-state[13] | 0,[3,indent,br_ty],0];
          pp_enqueue(state,tok$0);
          state[1] = [0,[0,state[13],tok$0],state[1]]}
        else
         if(state[14] === state[15])
          {var
            _dy_=state[16],
            size=caml_ml_string_length(_dy_),
            tok=[0,size,[0,_dy_],size];
           pp_enqueue(state,tok);
           advance_left(state)}
        caml_call1(state[18],0);
        return caml_call1(g,0)}};
    caml_set_oo_id([248,_cy_,0]);
    function _cz_(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var Canceled=caml_set_oo_id([248,_cA_,0]),current_data=[0,0];
    function repr_rec(t)
     {var _dw_=t[1];
      if(3 === _dw_[0])
       {var t$0=_dw_[1],t$1=repr_rec(t$0);
        if(t$1 !== t$0)t[1] = [3,t$1];
        return t$1}
      return t}
    function repr(t){return repr_rec(t)}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_cB_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         do_at_exit(0);
         return caml_sys_exit(2)}];
    function call_unsafe(f,x)
     {try
       {var _dv_=caml_call1(f,x);return _dv_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    function run_waiters_rec$0(counter,state,ws,rem)
     {var ws$0=ws,rem$0=rem;
      for(;;)
       if(typeof ws$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_waiters_rec_next(counter$0,state,rem$0)}
         return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0])}
       else
        switch(ws$0[0])
         {case 0:
           var _du_=ws$0[1][1];
           if(_du_)
            {var f=_du_[1];
             caml_call1(f,state);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return run_waiters_rec_next(counter$1,state,rem$0)}
             return caml_trampoline_return
                     (run_waiters_rec_next,[0,state,rem$0])}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_waiters_rec_next(counter$2,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          case 1:
           var f$0=ws$0[1];
           caml_call1(f$0,state);
           if(counter < 50)
            {var counter$3=counter + 1 | 0;
             return run_waiters_rec_next(counter$3,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          default:
           var
            ws2=ws$0[2],
            ws1=ws$0[1],
            rem$1=[0,ws2,rem$0],
            ws$0=ws1,
            rem$0=rem$1;
           continue}}
    function run_waiters_rec_next(counter,state,rem)
     {if(rem)
       {var rem$0=rem[2],ws=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_waiters_rec$0(counter$0,state,ws,rem$0)}
        return caml_trampoline_return(run_waiters_rec$0,[0,state,ws,rem$0])}
      return 0}
    function run_waiters_rec(state,ws,rem)
     {return caml_trampoline(run_waiters_rec$0(0,state,ws,rem))}
    function run_cancel_handlers_rec$0(counter,chs,rem)
     {var chs$0=chs,rem$0=rem;
      for(;;)
       if(typeof chs$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_cancel_handlers_rec_next(counter$0,rem$0)}
         return caml_trampoline_return(run_cancel_handlers_rec_next,[0,rem$0])}
       else
        switch(chs$0[0])
         {case 0:
           var f=chs$0[2],data=chs$0[1];
           current_data[1] = data;
           call_unsafe(f,0);
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$1,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          case 1:
           var n=chs$0[1];
           if(n[4]){n[4] = 0;n[1][2] = n[2];n[2][1] = n[1]}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$2,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          default:
           var
            chs2=chs$0[2],
            chs1=chs$0[1],
            rem$1=[0,chs2,rem$0],
            chs$0=chs1,
            rem$0=rem$1;
           continue}}
    function run_cancel_handlers_rec_next(counter,rem)
     {if(rem)
       {var rem$0=rem[2],chs=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_cancel_handlers_rec$0(counter$0,chs,rem$0)}
        return caml_trampoline_return(run_cancel_handlers_rec$0,[0,chs,rem$0])}
      return 0}
    function run_cancel_handlers_rec(chs,rem)
     {return caml_trampoline(run_cancel_handlers_rec$0(0,chs,rem))}
    function unsafe_run_waiters(sleeper,state)
     {var
       switch$0=
        1 === state[0]
         ?state[1] === Canceled?(run_cancel_handlers_rec(sleeper[4],0),1):0
         :0;
      return run_waiters_rec(state,sleeper[2],0)}
    var wakening=[0,0],to_wakeup=[0,0,0];
    function wakeup(t$0,v)
     {var t=repr_rec(t$0),_dt_=t[1];
      switch(_dt_[0])
       {case 1:if(_dt_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_dt_[1],state=[0,v];
         t[1] = state;
         var
          snapshot=current_data[1],
          already_wakening=wakening[1]?1:(wakening[1] = 1,0);
         unsafe_run_waiters(sleeper,state);
         if(already_wakening){current_data[1] = snapshot;return 0}
         for(;;)
          {if(0 === to_wakeup[1])
            {wakening[1] = 0;current_data[1] = snapshot;return 0}
           if(0 === to_wakeup[1])throw _H_;
           to_wakeup[1] = to_wakeup[1] - 1 | 0;
           var tail=to_wakeup[2],head=tail[2];
           if(head === tail)to_wakeup[2] = 0;else tail[2] = head[2];
           var _ds_=head[1];
           unsafe_run_waiters(_ds_[1],_ds_[2]);
           continue}
        }
      return invalid_arg(_cC_)}
    function append(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[2,l1,l2]}
    function cleanup(ws)
     {if(typeof ws !== "number")
       switch(ws[0])
        {case 0:if(!ws[1][1])return 0;break;
         case 2:
          var l2=ws[2],l1=ws[1],_dr_=cleanup(l2);
          return append(cleanup(l1),_dr_)
         }
      return ws}
    function connect(t1,t2)
     {var t1$0=repr(t1),t2$0=repr(t2),_dm_=t1$0[1];
      if(2 === _dm_[0])
       {var sleeper1=_dm_[1];
        if(t1$0 === t2$0)return 0;
        var _dn_=t2$0[1];
        if(2 === _dn_[0])
         {var sleeper2=_dn_[1];
          t2$0[1] = [3,t1$0];
          sleeper1[1] = sleeper2[1];
          var
           waiters=append(sleeper1[2],sleeper2[2]),
           removed=sleeper1[3] + sleeper2[3] | 0;
          if(42 < removed)
           {sleeper1[3] = 0;sleeper1[2] = cleanup(waiters)}
          else
           {sleeper1[3] = removed;sleeper1[2] = waiters}
          var
           _do_=sleeper2[4],
           _dp_=sleeper1[4],
           _dq_=
            typeof _dp_ === "number"
             ?_do_
             :typeof _do_ === "number"?_dp_:[2,_dp_,_do_];
          sleeper1[4] = _dq_;
          return 0}
        t1$0[1] = _dn_;
        return unsafe_run_waiters(sleeper1,_dn_)}
      throw [0,Assert_failure,_cD_]}
    function fast_connect(t,state)
     {var t$0=repr(t),_dl_=t$0[1];
      if(2 === _dl_[0])
       {var sleeper=_dl_[1];
        t$0[1] = state;
        return unsafe_run_waiters(sleeper,state)}
      throw [0,Assert_failure,_cE_]}
    function fail(e){return [0,[1,e]]}
    var
     pause_hook=[0,function(_dk_){return 0}],
     s1=_cz_(0),
     _cH_=[0,0],
     window=joo_global_object,
     no_handler=null,
     undefined$0=undefined;
    function _cI_(param)
     {if(s1[2] === s1){_cH_[1] = 0;return 0}
      var seq=_cz_(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _cH_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _dj_=curr !== seq?1:0;
        if(_dj_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _dj_}}
    function _cJ_(x){return 1 - (x == no_handler?1:0)}
    var
     false$0=false,
     jsoo_7bc72a9e=window.Array,
     Error=caml_set_oo_id([248,_cK_,0]),
     exn=[0,Error,{}],
     slot=caml_obj_tag(exn) === 248?exn:exn[1];
    caml_register_named_value(caml_new_string("jsError"),slot);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(jsoo_self)
       {return jsoo_self instanceof jsoo_7bc72a9e
                ?0
                :[0,caml_js_to_string(jsoo_self.toString())]});
    var
     jsoo_ebd11ba6="2d",
     Canvas_not_available=caml_set_oo_id([248,_cL_,0]),
     html_element=window.HTMLElement;
    html_element === undefined$0;
    var _cM_=2147483e3,jsoo_self=caml_js_get_console(0);
    function f(param)
     {return 1 === param
              ?(window.setTimeout(caml_js_wrap_callback(_cI_),0),0)
              :0}
    pause_hook[1] = f;
    function _cN_(s){return jsoo_self.log(s.toString())}
    async_exception_hook[1]
    =
    function(exn)
     {_cN_(_cO_);_cN_(to_string(exn));return print_backtrace(stderr)};
    var
     seed$0=caml_sys_random_seed(0),
     n=12,
     seed=0 === seed$0.length - 1?[0,0]:seed$0,
     l=seed.length - 1,
     i$0=0;
    for(;;)
     {caml_check_bound(s$0[1],i$0)[i$0 + 1] = i$0;
      var _ck_=i$0 + 1 | 0;
      if(54 !== i$0){var i$0=_ck_;continue}
      var accu=[0,_ce_],_cg_=54 + max(55,l) | 0,_cf_=0;
      if(!(_cg_ < 0))
       {var i=_cf_;
        for(;;)
         {var
           j=i % 55 | 0,
           k=caml_mod(i,l),
           x=caml_check_bound(seed,k)[k + 1],
           str=_e_(accu[1],caml_new_string("" + x));
          accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
          var
           _ch_=accu[1],
           _ca_=caml_string_get(_ch_,3) << 24,
           _cb_=caml_string_get(_ch_,2) << 16,
           _cc_=caml_string_get(_ch_,1) << 8,
           _cd_=((caml_string_get(_ch_,0) + _cc_ | 0) + _cb_ | 0) + _ca_ | 0,
           _ci_=(caml_check_bound(s$0[1],j)[j + 1] ^ _cd_) & 1073741823;
          caml_check_bound(s$0[1],j)[j + 1] = _ci_;
          var _cj_=i + 1 | 0;
          if(_cg_ !== i){var i=_cj_;continue}
          break}}
      s$0[2] = 0;
      var
       get=
        function(a,i,j,k)
         {var _dc_=i < 0?1:0;
          if(_dc_)
           var _dd_=_dc_;
          else
           {var _de_=j < 0?1:0;
            if(_de_)
             var _dd_=_de_;
            else
             {var _df_=k < 0?1:0;
              if(_df_)
               var _dd_=_df_;
              else
               {var _dg_=i < 12?1:0;
                if(_dg_)
                 {var _dh_=j < 12?1:0;
                  if(_dh_)
                   var
                    _di_=k < 12?1:0,
                    _dd_=
                     _di_
                      ?caml_check_bound
                         (caml_check_bound(caml_check_bound(a,i)[i + 1],j)[j + 1],k)
                        [k + 1]
                      :_di_;
                  else
                   var _dd_=_dh_}
                else
                 var _dd_=_dg_}}}
          return _dd_},
       top="#a8a8f6",
       left="#d9d9d9",
       right="#767676",
       on_cube=
        function(jsoo_self,i,j,k,f)
         {jsoo_self.save();
          jsoo_self.translate
           ((((i - k | 0) + 12 | 0) - 1 | 0) * 17,
            (11 - j | 0) * 20 + (i + k | 0) * 20 / 2);
          caml_call1(f,jsoo_self);
          return jsoo_self.restore()},
       draw_top=
        function(jsoo_self)
         {jsoo_self.fillStyle = top;
          jsoo_self.beginPath();
          jsoo_self.moveTo(17,0);
          jsoo_self.lineTo(34,10);
          jsoo_self.lineTo(17,20);
          jsoo_self.lineTo(0,10);
          return jsoo_self.fill()},
       top_edges=
        function(jsoo_self)
         {jsoo_self.beginPath();
          jsoo_self.moveTo(0,10);
          jsoo_self.lineTo(17,0);
          jsoo_self.lineTo(34,10);
          return jsoo_self.stroke()},
       draw_right=
        function(jsoo_self)
         {jsoo_self.fillStyle = right;
          jsoo_self.beginPath();
          jsoo_self.moveTo(17,20);
          jsoo_self.lineTo(17,40);
          jsoo_self.lineTo(34,30);
          jsoo_self.lineTo(34,10);
          return jsoo_self.fill()},
       right_edges=
        function(jsoo_self)
         {jsoo_self.beginPath();
          jsoo_self.moveTo(17,40);
          jsoo_self.lineTo(17,20);
          jsoo_self.lineTo(34,10);
          return jsoo_self.stroke()},
       draw_left=
        function(jsoo_self)
         {jsoo_self.fillStyle = left;
          jsoo_self.beginPath();
          jsoo_self.moveTo(17,20);
          jsoo_self.lineTo(17,40);
          jsoo_self.lineTo(0,30);
          jsoo_self.lineTo(0,10);
          return jsoo_self.fill()},
       left_edges=
        function(jsoo_self)
         {jsoo_self.beginPath();
          jsoo_self.moveTo(17,20);
          jsoo_self.lineTo(0,10);
          jsoo_self.lineTo(0,30);
          return jsoo_self.stroke()},
       tile=
        function(c,a,param)
         {var left=param[3],right=param[2],top=param[1],i$1=0;
          a:
          for(;;)
           {var j$1=[0,11],k$1=0;
            b:
            for(;;)
             for(;;)
              {if(0 <= j$1[1])
                {var _da_=j$1[1];
                 if
                  (!caml_check_bound
                     (caml_check_bound(caml_check_bound(a,i$1)[i$1 + 1],_da_)
                       [_da_ + 1],
                      k$1)
                    [k$1 + 1])
                  {j$1[1] += -1;continue}}
               on_cube(c,i$1,j$1[1],k$1,top);
               var _db_=k$1 + 1 | 0;
               if(11 !== k$1){var k$1=_db_;continue b}
               var _c$_=i$1 + 1 | 0;
               if(11 !== i$1){var i$1=_c$_;continue a}
               var j$0=0;
               c:
               for(;;)
                {var i$0=[0,11],k$0=0;
                 d:
                 for(;;)
                  for(;;)
                   {if(0 <= i$0[1])
                     {var _c9_=i$0[1];
                      if
                       (!caml_check_bound
                          (caml_check_bound(caml_check_bound(a,_c9_)[_c9_ + 1],j$0)
                            [j$0 + 1],
                           k$0)
                         [k$0 + 1])
                       {i$0[1] += -1;continue}}
                    on_cube(c,i$0[1],j$0,k$0,right);
                    var _c__=k$0 + 1 | 0;
                    if(11 !== k$0){var k$0=_c__;continue d}
                    var _c8_=j$0 + 1 | 0;
                    if(11 !== j$0){var j$0=_c8_;continue c}
                    var i=0;
                    e:
                    for(;;)
                     {var k=[0,11],j=0;
                      f:
                      for(;;)
                       for(;;)
                        {if(0 <= k[1])
                          {var _c6_=k[1];
                           if
                            (!caml_check_bound
                               (caml_check_bound(caml_check_bound(a,i)[i + 1],j)[j + 1],
                                _c6_)
                              [_c6_ + 1])
                            {k[1] += -1;continue}}
                         on_cube(c,i,j,k[1],left);
                         var _c7_=j + 1 | 0;
                         if(11 !== j){var j=_c7_;continue f}
                         var _c5_=i + 1 | 0;
                         if(11 !== i){var i=_c5_;continue e}
                         return 0}}}}}}},
       create_canvas=
        function(param)
         {var doc=window.document,c=doc.createElement("canvas");
          if(_cJ_(c.getContext)){c.width = 409;c.height = 481;return c}
          throw Canvas_not_available},
       redraw=
        function(jsoo_self,jsoo_b9bde2df,a)
         {var jsoo_self$0=jsoo_b9bde2df.getContext(jsoo_ebd11ba6);
          jsoo_self$0.setTransform(1,0,0,1,0,0);
          jsoo_self$0.clearRect(0,0,jsoo_b9bde2df.width,jsoo_b9bde2df.height);
          jsoo_self$0.setTransform(1,0,0,1,0.5,0.5);
          var match="lighter";
          jsoo_self$0.globalCompositeOperation = match;
          tile(jsoo_self$0,a,[0,draw_top,draw_right,draw_left]);
          var match$0="source-over";
          jsoo_self$0.globalCompositeOperation = match$0;
          tile(jsoo_self$0,a,[0,top_edges,right_edges,left_edges]);
          jsoo_self$0.beginPath();
          jsoo_self$0.moveTo(0,360);
          jsoo_self$0.lineTo(204,480);
          jsoo_self$0.lineTo(408,360);
          jsoo_self$0.lineTo(408,120);
          jsoo_self$0.stroke();
          return jsoo_self.drawImage(jsoo_b9bde2df,0,0)},
       loop=
        function(c$0,c,a)
         {function f$0(param)
           {var need_redraw=[0,0],i$0=0;
            for(;;)
             {var i=_cn_(n),j=_cn_(n),k=_cn_(n);
              if
               (caml_check_bound
                  (caml_check_bound(caml_check_bound(a,i)[i + 1],j)[j + 1],k)
                 [k + 1])
               {if(get(a,i + 1 | 0,j,k))
                 var switch$0=0;
                else
                 if(get(a,i,j + 1 | 0,k))
                  var switch$0=0;
                 else
                  if(get(a,i,j,k + 1 | 0))
                   var switch$0=0;
                  else
                   {caml_check_bound
                      (caml_check_bound(caml_check_bound(a,i)[i + 1],j)[j + 1],k)
                     [k + 1]
                    =
                    0;
                    var _c2_=1,switch$0=1}
                if(!switch$0)var _c2_=0}
              else
               {if(get(a,i - 1 | 0,j,k))
                 if(get(a,i,j - 1 | 0,k))
                  if(get(a,i,j,k - 1 | 0))
                   {caml_check_bound
                      (caml_check_bound(caml_check_bound(a,i)[i + 1],j)[j + 1],k)
                     [k + 1]
                    =
                    1;
                    var _c2_=1,switch$1=1}
                  else
                   var switch$1=0;
                 else
                  var switch$1=0;
                else
                 var switch$1=0;
                if(!switch$1)var _c2_=0}
              var _c3_=_c2_ || need_redraw[1];
              need_redraw[1] = _c3_;
              var _c4_=i$0 + 1 | 0;
              if(99 !== i$0){var i$0=_c4_;continue}
              if(need_redraw[1])redraw(c$0,c,a);
              return loop(c$0,c,a)}}
          var t=[0,[2,[0,1,0,0,0]]],d=200;
          function callback(_c1_){return wakeup(t,_c1_)}
          var id=[0,0];
          function loop$0(d,param)
           {var
             match=2147483e3 < d?[0,_cM_,d - 2147483e3]:[0,d,0],
             remain=match[2],
             step=match[1],
             cb=
              remain == 0?callback:function(_c0_){return loop$0(remain,_c0_)};
            id[1] = [0,window.setTimeout(caml_js_wrap_callback(cb),step)];
            return 0}
          loop$0(d,0);
          function f(param)
           {var _cZ_=id[1];
            if(_cZ_){var x=_cZ_[1];id[1] = 0;return window.clearTimeout(x)}
            return 0}
          var _cU_=repr(t)[1];
          switch(_cU_[0])
           {case 1:
             var switch$0=_cU_[1] === Canceled?(call_unsafe(f,0),1):0;break;
            case 2:
             var
              sleeper=_cU_[1],
              handler=[0,current_data[1],f],
              _cV_=sleeper[4],
              handler$0=typeof _cV_ === "number"?handler:[2,handler,_cV_];
             sleeper[4] = handler$0;
             var switch$0=1;
             break;
            default:var switch$0=0}
          var t$0=repr(t),_cW_=t$0[1];
          switch(_cW_[0])
           {case 0:var v=_cW_[1];return f$0(v);
            case 1:return [0,_cW_];
            case 2:
             var
              sleeper$0=_cW_[1],
              res=[0,[2,[0,[0,[0,t$0]],0,0,0]]],
              data=current_data[1],
              waiter$1=
               function(state)
                {switch(state[0])
                  {case 0:
                    var v=state[1];
                    current_data[1] = data;
                    try
                     {var _cY_=f$0(v),_cX_=_cY_}
                    catch(exn)
                     {exn = caml_wrap_exception(exn);var _cX_=fail(exn)}
                    return connect(res,_cX_);
                   case 1:return fast_connect(res,state);
                   default:throw [0,Assert_failure,_cF_]}},
              waiter$0=[1,waiter$1],
              _cT_=sleeper$0[2],
              waiter=typeof _cT_ === "number"?waiter$0:[2,waiter$0,_cT_];
             sleeper$0[2] = waiter;
             return res;
            default:throw [0,Assert_failure,_cG_]}},
       f$0=
        function(param)
         {var jsoo_ad7fbbdd=create_canvas(0),c=create_canvas(0);
          window.document.body.appendChild(jsoo_ad7fbbdd);
          var c$0=jsoo_ad7fbbdd.getContext(jsoo_ebd11ba6),match="copy";
          c$0.globalCompositeOperation = match;
          var
           a=
            _k_
             (n,
              function(param)
               {return _k_(n,function(param){return caml_make_vect(12,1)})});
          redraw(c$0,c,a);
          loop(c$0,c,a);
          return false$0},
       match=
        function(jsoo_self)
         {if(_cJ_(jsoo_self))
           {var res=f$0(jsoo_self);
            if(!(res | 0))jsoo_self.preventDefault();
            return res}
          var jsoo_obj=event,match=f$0(jsoo_obj);
          if(!(match | 0))jsoo_obj.returnValue = match;
          return match};
      window.onload = match;
      do_at_exit(0);
      return}}
  (function(){return this}()));

//# sourceMappingURL=cubes.map