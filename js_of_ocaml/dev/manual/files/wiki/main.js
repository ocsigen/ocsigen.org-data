// Generated by js_of_ocaml 3.0
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("equal: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(!c[m[i]])c[m[i]] = f;
      return c}
    var caml_js_regexps={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
    function caml_js_html_escape(s)
     {if(!caml_js_regexps.all.test(s))return s;
      return s.replace(caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;")}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_lessequal(x,y){return +(caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return +(caml_compare_val(x,y,false) < 0)}
    function caml_lex_array(s)
     {s = caml_bytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(!tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_string(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = -1}
      else
       state = -state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return -base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return -state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == -1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(!chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd();
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(-1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_ml_string_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(!this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name){this.lookup(name);return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);if(m && !seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!a instanceof joo_global_object.Uint8Array)
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!(a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var jsoo_mount_point=[];
    if(typeof require == "undefined")
     jsoo_mount_point.push({path:"/",device:new MlFakeDevice("/")});
    else
     jsoo_mount_point.push({path:"/",device:new MlNodeDevice("/")});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (!res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c],l];
      return l}
    function caml_ml_output(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_is_block(x){return +(x instanceof Array)}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error)
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     zero_pos=[0,caml_new_string(""),1,0,0],
     s=caml_new_string("Buffer.add: cannot grow buffer"),
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     ocaml_lex_tables=
      [0,
       caml_new_string
        ("\0\0\x01\0\x02\0\x01\0\x01\0\x01\0\x02\0\x05\0\x01\0\xff\xff\x03\0\x04\0\x06\0\x07\0\xfe\xff\x03\0\x04\0\x06\0\xfb\xff\x02\0\x03\0\x07\0\xfa\xff\b\0\xf8\xff\x0b\0\xee\xff/\0\x14\0.\0F\0U\0l\0\x9b\0\xc1\0\xd0\0\b\x01\x19\x01M\x01Q\x01\f\0\xff\xff\xfe\xff\xfd\xff\xfc\xff\r\0\x94\x01@\0B\0J\0\xf9\xffx\0\xfb\xff\x98\x01\xcc\x01\xdb\x01\x01\x025\x02E\x02y\x02\x9f\x02\xae\x02\x1f\0\xe3\x02\xf5\x02\x19\x03*\x03`\0\xfa\xff\xf8\xffY\x03_\x03\x8e\x03\xd7\x03\x0e\x04:\x04d\x04i\x04\x80\x04\xf6\xffj\0a\0\xd7\0\x87\0\xab\0\xf5\xff\xb6\0\xd2\0\x0b\0\xf3\xff\xf0\xff\xf2\xff\x0f\0\x8f\0p\x01\x10\0\xfd\xff\xdf\0\xfe\xffe\x01\x8f\x01{\x01\x89\x01\xe4\0\xff\xff\x11\0\x9a\x01\x04\x01\x12\0"),
       caml_new_string
        ("\b\0\x06\0\xff\xff\xff\xff\x03\0\x02\0\x01\0\xff\xff\0\0\xff\xff\x01\0\x01\0\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\x10\0\x0e\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\xff\xff\x10\0\x10\0\x10\0\x05\0\xff\xff\xff\xff\xff\xff\x10\0\x10\0\x10\0\x10\0\b\0\b\0\xff\xff\x10\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\r\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\x01\0"),
       caml_new_string
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x1b\0\0\0\x1b\0\xff\xffY\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\x1b\x000\x000\x000\0\0\x000\0\0\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0?\0>\0?\0?\0?\0\x1b\0>\0\0\0\0\0\x1b\0\x1b\0\x1b\0K\0J\0K\0J\0\x1b\0\x1b\0\0\0R\0Q\0R\0S\0S\0\0\0Q\0Q\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xffa\0\xff\xff\0\0a\0\0\0a\0a\0a\0a\0a\0\0\0\xff\xffa\0a\0\xff\xff"),
       caml_new_string
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\t\0\t\0\x12\0\b\0\x07\0\x11\0\x12\0\x16\0\x16\0\x13\0\x17\0)\0)\0,\0(\0[\0`\0h\0b\0]\0[\0\0\0\x07\0\\\0\0\0\x04\0\x04\0\x07\0\x11\0\0\0\x04\0\xff\xff\x05\0\x05\0\xff\xff\x03\0\x0f\0\x05\0\x10\0\x11\0\x03\0\0\0]\0'\0\0\0\xff\xff\xff\xff\xff\xff&\0\xff\xff\xff\xff\x06\0\x18\0\n\0\x0b\0\f\0\x06\0\r\0\x0e\0\0\0\0\0#\0%\0\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffZ\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0C\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0$\0\x1f\0\"\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff \0\0\0!\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x02\0\x01\0\x14\0\x15\0\xff\xff\x02\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\x1c\0X\0\x1d\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff]\0[\0\0\0\xff\xff\\\x001\0D\x003\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff]\0\xff\xffO\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff2\0\0\0\xff\xffP\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xffV\0\xff\xffM\0\xff\xff\0\0\0\0\xff\xffQ\0\xff\xff\xff\xff\xff\xff`\0\xff\xff\xff\xff_\0\0\0h\0\0\0\xff\xffi\0\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xffT\0\0\0\x12\0\x16\0\0\0\0\0\0\0\x1a\x005\0\xff\xffb\0F\0\0\0l\0\xff\xff\0\0[\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xffE\0\xff\xff\0\0\0\0.\0,\0\0\0\0\0-\0\xff\xffU\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xffW\0\0\0\0\0\xff\xff\xff\xff\xff\xff.\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xffX\0\0\0\0\0\0\0S\0\0\0\xff\xff%\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0/\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff`\0\xff\xff\0\0_\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffd\0`\0*\0+\0_\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff`\0\xff\xff\xff\xff_\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff[\0d\0\0\0\0\0`\0\xff\xff\xff\xff_\0\xff\xffd\0`\0\0\0\xff\xff_\0.\0,\0\0\0\0\0-\0\xff\xff\0\0`\0\xff\xff\0\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffd\0\0\0\0\0\0\0\xff\xff.\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0`\0\0\0\0\0j\0\0\0h\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0c\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0f\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0b\0\xff\xffg\0\0\0\xff\xff\xff\xff\xff\xff\xff\xffe\0\0\0\xff\xff\xff\xff\xff\xff6\0\xff\xff\xff\xff\xff\xff\0\0\xff\xffk\0\xff\xff,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\x007\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff8\0\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff`\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xffb\0\0\0\xff\xff\0\0\xff\xff9\0\0\0\0\0\0\0\0\0\0\0`\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0`\0\0\0\0\0\0\0\0\0\0\0`\0\xff\xff\xff\xff\xff\xff\0\0,\0\0\0\0\0\0\0\xff\xff\0\0`\0\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0;\0\xff\xff\xff\xff:\0\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0=\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0>\0\0\0\0\0\xff\xff\xff\xff>\0<\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0@\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\0\0>\0>\0>\0\0\0>\0\0\0\0\0\0\0\0\0>\0\0\0>\0\0\0>\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0>\0>\0A\0\0\0\xff\xff>\0\0\0\xff\xff\0\0\0\0>\0>\0\0\0>\0\0\0\0\0\0\0\0\0\0\0>\0\x1b\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0>\0>\0>\0\0\0\0\0>\0\0\0\xff\xff\0\0\0\0>\0>\0\0\0>\0\0\0\0\0\0\0\0\0>\0>\0>\0\0\0\xff\xff\0\0>\0B\0\0\0\xff\xff\0\0>\0\0\0>\0>\0>\0\0\0>\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0>\0>\0\0\0>\0>\0>\0>\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0>\0\0\0>\0\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0>\0>\0\xff\xff>\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xffI\0\0\0\0\0\xff\xff\0\0G\0\0\0H\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\x1b\0\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\x1b\0I\0I\0\0\0\0\0\0\0\0\0I\0\0\0\0\0J\0\0\0I\0\0\0I\0J\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0I\0I\0\0\0J\0\0\0I\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xffL\0L\0\0\0J\0J\0J\0L\0\0\0\0\0\0\0\0\0L\0\0\0L\0J\0\0\0J\0\0\0\0\0\0\0\x1b\0\xff\xff\0\0\0\0\xff\xffL\0L\0\0\0\0\0\0\0L\0\0\0\0\0\0\0\0\0J\0J\0\0\0J\0\0\0\0\0\0\0\xff\xff\x1b\0I\0I\0\0\0\0\0\xff\xff\0\0I\0\0\0\0\0J\0\0\0I\0\0\0I\0J\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xffI\0I\0\xff\xffJ\0\0\0I\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xffL\0L\0\0\0\0\0\0\0\xff\xffL\0\0\0\xff\xff\xff\xff\0\0L\0\0\0L\0\xff\xff\0\0J\0J\0J\0\xff\xff\0\0\0\0\0\0\0\0\0\0L\0L\0J\0\0\0J\0L\0\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0J\0J\0\0\0J\0\0\0I\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0N\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff"),
       caml_new_string
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\b\0\x13\0\0\0\x07\0\x11\0\x11\0\x15\0\x17\0\x11\0\x15\0\x19\0(\0-\0\x19\0\\\0_\0i\0l\0\x1c\0\x1c\0\xff\xff\0\0\x1c\0\xff\xff\0\0\x04\0\x07\0\x11\0\xff\xff\x07\0>\0\0\0\x05\0>\0\0\0\x03\0\x07\0\x0f\0\x10\0\x07\0\xff\xff\x1c\0\x19\0\xff\xff\x1d\0\x1d\0\x1b\0\x19\0\x1d\0\x1b\0\0\0\x01\0\x06\0\n\0\x0b\0\x07\0\f\0\r\0\xff\xff\xff\xff\x19\0\x19\0\xff\xff/\0\xff\xff0\0/\0\x1d\x000\0\x1e\0\x1c\0\xff\xff\x1e\x001\0\xff\xff\xff\xff1\0\xff\xff\x1b\0\xff\xff\xff\xff\xff\xff>\0\x1b\0\x1f\0\xff\xff\xff\xff\x1f\0\xff\xff\xff\xff\xff\xff\x19\0\x19\0\x19\0\xff\xffC\0Q\0\x1b\0C\0Q\0\xff\xff\x1e\0\x19\0\xff\xff\x19\0P\0\x1e\0 \0P\0\xff\xff \0\xff\xff\0\0\0\0\x02\0\x14\0\x1f\0\x07\0\x07\x003\0\x1e\0\x1f\x003\0\x19\0\x19\0X\0\x19\0\x1b\0\x1b\0\x1b\0\xff\xff\xff\xff\xff\xff\xff\xffS\0\x1f\0\xff\xffS\0\x1b\0 \0\x1b\0]\0]\0\xff\xff \0]\0/\0C\x000\0\xff\xff\x1e\0\x1e\0\x1e\0\xff\xff!\0\xff\xff1\0!\0 \0\x1b\0\x1b\0\x1e\0\x1b\0\x1e\0]\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xffT\0\xff\xff\xff\xffT\0\xff\xff\xff\xff\x1f\0/\0\x1f\x000\0\xff\xffV\0\x1e\0\x1e\0V\0\x1e\0!\x001\0 \0 \0 \0!\0\"\0\xff\xff\xff\xff\"\0\xff\xff\x1f\0\x1f\0 \0\x1f\0 \x003\0\xff\xff\xff\xff!\0\xff\xff#\0\xff\xffW\0#\0Q\0W\0 \0R\0\xff\xff\xff\xffR\0P\0P\0 \0 \0a\0 \0\"\0a\0\xff\xffg\0\xff\xff\"\0g\0\xff\xff\xff\xff3\0\xff\xff!\0!\0!\0\xff\xff#\0\xff\xff\xff\xff\xff\xff\"\0#\0\xff\xff!\0\xff\xff!\0S\0\xff\xff\x11\0\x15\0\xff\xff\xff\xff\xff\xff\x19\0#\0#\0k\0!\0\xff\xffk\0$\0\xff\xff\x1c\0$\0!\0!\0\xff\xff!\0\xff\xff\xff\xff\"\0\"\0\"\0>\0\xff\xff\xff\xff%\0%\0\xff\xff\xff\xff%\0\"\0T\0\"\0\xff\xff#\0#\0#\0\x1d\0\x1b\0\xff\xff\xff\xff$\0V\0\xff\xff\xff\xff#\0$\0#\0%\0\xff\xff\xff\xff\"\0\"\0\xff\xff\"\0/\0\xff\xff0\0%\0\xff\xff$\0\x1e\0\xff\xff%\0\xff\xff1\0#\0#\0\xff\xff#\0W\0\xff\xff\xff\xff\xff\xffR\0\xff\xff\x1f\0%\0&\0\xff\xff\xff\xff&\0'\0\xff\xff\xff\xff'\0\xff\xffC\0Q\0\xff\xff$\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xffP\0\xff\xff \0\xff\xff$\0c\0$\0\xff\xffc\0\xff\xff%\0%\0%\0&\x003\0^\0^\0'\0&\0^\0\xff\xff%\0'\0%\0\xff\xff$\0$\0e\0$\0S\0e\0\xff\xff&\0\xff\xff\xff\xff\xff\xff'\0]\0^\0\xff\xff\xff\xfff\0%\0%\0f\0%\0d\0d\0\xff\xff!\0d\0.\0.\0\xff\xff\xff\xff.\x005\0\xff\xffj\x005\0\xff\xffj\0&\0&\0&\0T\0'\0'\0'\0d\0\xff\xff\xff\xff\xff\xff&\0.\0&\0V\0'\0\xff\xff'\0\xff\xff\xff\xff\xff\xff\xff\xff.\0\xff\xff\xff\xff\"\x005\0.\0\xff\xff\xff\xff\xff\xff5\0&\0&\0\xff\xff&\0'\0'\0\xff\xff'\0#\0.\0W\0\xff\xff\xff\xff5\x006\0R\0\xff\xff6\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffa\0\xff\xff\xff\xffc\0\xff\xffg\x007\0\xff\xff\xff\xff7\0\xff\xff\xff\xff\xff\xff\xff\xff^\0\xff\xff.\0.\0.\0\xff\xff5\x005\x005\x006\0\xff\xffe\0\xff\xff.\x006\0.\0\xff\xff5\0\xff\xff5\0\xff\xff\xff\xff\xff\xffk\x007\0f\0\xff\xff$\x006\x007\x008\0d\0\xff\xff8\0.\0.\x005\0.\x005\x005\0\xff\xff5\0j\x007\0%\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff6\x006\x006\0\xff\xff8\0\xff\xff\xff\xff\xff\xff\xff\xff8\0\xff\xff6\0\xff\xff6\0\xff\xff7\x007\x007\0\xff\xff\xff\xff6\0\xff\xff\xff\xff8\x009\0\xff\xff7\x009\x007\0\xff\xff\xff\xff\xff\xff6\x006\0\xff\xff6\0\xff\xff\xff\xff&\0\xff\xff:\x007\0'\0:\0\xff\xff\xff\xff\xff\xff7\x007\0\xff\xff7\0\xff\xff\xff\xff8\x008\x008\x009\0\xff\xff\xff\xff\xff\xff\xff\xff9\0c\0\xff\xff8\0\xff\xff8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0^\0\xff\xff9\0\xff\xff:\x008\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffe\x008\x008\0\xff\xff8\0\xff\xff\xff\xff:\0;\0\xff\xff\xff\xff;\0\xff\xff\xff\xfff\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffd\x009\x009\x009\0\xff\xff.\0\xff\xff\xff\xff\xff\xff5\0\xff\xffj\x009\0\xff\xff9\0\xff\xff\xff\xff:\0:\0:\0;\0\xff\xff\xff\xff\xff\xff:\0;\0<\x009\0:\0<\0:\0\xff\xff\xff\xff9\x009\0\xff\xff9\0\xff\xff\xff\xff;\0\xff\xff=\0\xff\xff\xff\xff=\0\xff\xff\xff\xff\xff\xff<\0:\0:\0\xff\xff:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0\xff\xff\xff\xff6\0\xff\xff<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0\xff\xff=\0\xff\xff\xff\xff7\0<\0=\0;\0;\0\xff\xff;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0?\0\xff\xff\xff\xff?\0\xff\xff\xff\xff\xff\xff;\0;\0\xff\xff;\0\xff\xff\xff\xff<\0<\0<\0\xff\xff\xff\xff@\0\xff\xff8\0@\0\xff\xff\xff\xff<\0\xff\xff<\0\xff\xff=\0=\0=\0\xff\xff?\0\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff=\0\xff\xff=\0\xff\xff\xff\xff\xff\xff<\0<\0\xff\xff<\0\xff\xff@\0?\0?\0\xff\xffA\0@\0\xff\xffA\0\xff\xff\xff\xff=\0=\0\xff\xff=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0B\x009\0\xff\xffB\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0\xff\xff\xff\xffA\0\xff\xff:\0\xff\xff\xff\xffA\0?\0\xff\xff?\0\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0@\0\xff\xffB\0\xff\xffA\0A\0\xff\xffB\0\xff\xff@\0\xff\xff@\0?\0?\0\xff\xff?\0\xff\xffF\0\xff\xff\xff\xffF\0B\0\xff\xffG\0\xff\xff\xff\xffG\0\xff\xff\xff\xff\xff\xff@\0@\0\xff\xff@\0A\0A\0A\0\xff\xff\xff\xff;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0\xff\xffA\0\xff\xffF\0\xff\xffB\0B\0B\0F\0G\0\xff\xff\xff\xff\xff\xff\xff\xffG\0\xff\xffB\0\xff\xffB\0\xff\xffA\0A\0F\0A\0H\0\xff\xff\xff\xffH\0G\0\xff\xff\xff\xff<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\0B\0\xff\xffB\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0\xff\xffH\0\xff\xffG\0G\0G\0H\0\xff\xffF\0\xff\xffF\0\xff\xff\xff\xff\xff\xffG\0\xff\xffG\0H\0\xff\xff\xff\xffH\0\xff\xffF\0\xff\xffG\0\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0\xff\xffF\0\xff\xff\xff\xffG\0G\0\xff\xffG\0\xff\xff\xff\xffI\0I\0\xff\xff?\0I\0\xff\xff\xff\xff\xff\xff\xff\xffH\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffH\0@\0H\0I\0I\0I\0\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xff\xff\xffI\0\xff\xffI\0\xff\xffI\0I\0\xff\xff\xff\xffH\0H\0\xff\xffH\0\xff\xff\xff\xff\xff\xff\xff\xffI\0I\0\xff\xffI\0\xff\xffI\0J\0J\0A\0\xff\xffJ\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\0\xff\xff\xff\xff\xff\xffJ\0J\0J\0\xff\xffI\0I\0I\0J\0\xff\xff\xff\xff\xff\xff\xff\xffJ\0\xff\xffJ\0I\0\xff\xffI\0\xff\xff\xff\xff\xff\xffK\0K\0\xff\xff\xff\xffK\0J\0J\0\xff\xff\xff\xff\xff\xffJ\0\xff\xff\xff\xff\xff\xff\xff\xffI\0I\0\xff\xffI\0\xff\xff\xff\xff\xff\xffF\0K\0K\0K\0\xff\xff\xff\xffG\0\xff\xffK\0\xff\xff\xff\xffK\0\xff\xffK\0\xff\xffK\0K\0\xff\xff\xff\xff\xff\xffL\0L\0\xff\xff\xff\xffL\0\xff\xffM\0K\0K\0M\0K\0\xff\xffK\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0L\0L\0\xff\xff\xff\xff\xff\xffN\0L\0\xff\xffN\0H\0\xff\xffL\0\xff\xffL\0M\0\xff\xffK\0K\0K\0M\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0L\0K\0\xff\xffK\0L\0\xff\xff\xff\xffM\0\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffK\0K\0\xff\xffK\0\xff\xffN\0\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffM\0M\0M\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffM\0\xff\xffM\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xffM\0\xff\xffN\0N\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffM\0M\0N\0M\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0N\0\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffJ\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffK\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0\xff\xff\xff\xff\xff\xff\xff\xffM\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0"),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string("")],
     sep=caml_new_string("");
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _f_=caml_new_string("output_substring"),
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _g_=caml_new_string("\\\\"),
     _h_=caml_new_string("\\'"),
     _i_=caml_new_string("\\b"),
     _j_=caml_new_string("\\t"),
     _k_=caml_new_string("\\n"),
     _l_=caml_new_string("\\r"),
     _o_=caml_new_string("String.blit / Bytes.blit_string"),
     _n_=caml_new_string("Bytes.blit"),
     _m_=caml_new_string("String.sub / Bytes.sub"),
     _p_=caml_new_string(""),
     _q_=caml_new_string("Queue.Empty"),
     _r_=caml_new_string("Buffer.add_substring/add_subbytes"),
     _A_=caml_new_string("%c"),
     _B_=caml_new_string("%s"),
     _C_=caml_new_string("%i"),
     _D_=caml_new_string("%li"),
     _E_=caml_new_string("%ni"),
     _F_=caml_new_string("%Li"),
     _G_=caml_new_string("%f"),
     _H_=caml_new_string("%B"),
     _I_=caml_new_string("%{"),
     _J_=caml_new_string("%}"),
     _K_=caml_new_string("%("),
     _L_=caml_new_string("%)"),
     _M_=caml_new_string("%a"),
     _N_=caml_new_string("%t"),
     _O_=caml_new_string("%?"),
     _P_=caml_new_string("%r"),
     _Q_=caml_new_string("%_r"),
     _R_=[0,caml_new_string("camlinternalFormat.ml"),845,23],
     _aa_=[0,caml_new_string("camlinternalFormat.ml"),809,21],
     _U_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _ab_=[0,caml_new_string("camlinternalFormat.ml"),813,21],
     _V_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _ac_=[0,caml_new_string("camlinternalFormat.ml"),817,19],
     _W_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),821,22],
     _X_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),826,30],
     _Y_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     ___=[0,caml_new_string("camlinternalFormat.ml"),831,26],
     _S_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _$_=[0,caml_new_string("camlinternalFormat.ml"),841,28],
     _T_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _Z_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _bb_=caml_new_string("%u"),
     _a$_=[0,caml_new_string("camlinternalFormat.ml"),1520,4],
     _ba_=caml_new_string("Printf: bad conversion %["),
     _bc_=[0,caml_new_string("camlinternalFormat.ml"),1588,39],
     _bd_=[0,caml_new_string("camlinternalFormat.ml"),1611,31],
     _be_=[0,caml_new_string("camlinternalFormat.ml"),1612,31],
     _bf_=caml_new_string("Printf: bad conversion %_"),
     _bg_=caml_new_string("@{"),
     _bh_=caml_new_string("@["),
     _bi_=caml_new_string("@{"),
     _bj_=caml_new_string("@["),
     _a9_=caml_new_string("nan"),
     _a__=caml_new_string("."),
     _a7_=caml_new_string("neg_infinity"),
     _a8_=caml_new_string("infinity"),
     _a6_=caml_new_string("%.12g"),
     _aT_=caml_new_string("%nd"),
     _aU_=caml_new_string("%+nd"),
     _aV_=caml_new_string("% nd"),
     _aW_=caml_new_string("%ni"),
     _aX_=caml_new_string("%+ni"),
     _aY_=caml_new_string("% ni"),
     _aZ_=caml_new_string("%nx"),
     _a0_=caml_new_string("%#nx"),
     _a1_=caml_new_string("%nX"),
     _a2_=caml_new_string("%#nX"),
     _a3_=caml_new_string("%no"),
     _a4_=caml_new_string("%#no"),
     _a5_=caml_new_string("%nu"),
     _aG_=caml_new_string("%ld"),
     _aH_=caml_new_string("%+ld"),
     _aI_=caml_new_string("% ld"),
     _aJ_=caml_new_string("%li"),
     _aK_=caml_new_string("%+li"),
     _aL_=caml_new_string("% li"),
     _aM_=caml_new_string("%lx"),
     _aN_=caml_new_string("%#lx"),
     _aO_=caml_new_string("%lX"),
     _aP_=caml_new_string("%#lX"),
     _aQ_=caml_new_string("%lo"),
     _aR_=caml_new_string("%#lo"),
     _aS_=caml_new_string("%lu"),
     _at_=caml_new_string("%Ld"),
     _au_=caml_new_string("%+Ld"),
     _av_=caml_new_string("% Ld"),
     _aw_=caml_new_string("%Li"),
     _ax_=caml_new_string("%+Li"),
     _ay_=caml_new_string("% Li"),
     _az_=caml_new_string("%Lx"),
     _aA_=caml_new_string("%#Lx"),
     _aB_=caml_new_string("%LX"),
     _aC_=caml_new_string("%#LX"),
     _aD_=caml_new_string("%Lo"),
     _aE_=caml_new_string("%#Lo"),
     _aF_=caml_new_string("%Lu"),
     _ag_=caml_new_string("%d"),
     _ah_=caml_new_string("%+d"),
     _ai_=caml_new_string("% d"),
     _aj_=caml_new_string("%i"),
     _ak_=caml_new_string("%+i"),
     _al_=caml_new_string("% i"),
     _am_=caml_new_string("%x"),
     _an_=caml_new_string("%#x"),
     _ao_=caml_new_string("%X"),
     _ap_=caml_new_string("%#X"),
     _aq_=caml_new_string("%o"),
     _ar_=caml_new_string("%#o"),
     _as_=caml_new_string("%u"),
     _s_=caml_new_string("@]"),
     _t_=caml_new_string("@}"),
     _u_=caml_new_string("@?"),
     _v_=caml_new_string("@\n"),
     _w_=caml_new_string("@."),
     _x_=caml_new_string("@@"),
     _y_=caml_new_string("@%"),
     _z_=caml_new_string("@"),
     _af_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bn_=caml_new_string(""),
     _bo_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _bE_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _bF_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _by_=caml_new_string("Raised at"),
     _bz_=caml_new_string("Re-raised at"),
     _bA_=caml_new_string("Raised by primitive operation at"),
     _bB_=caml_new_string("Called from"),
     _bC_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [11,
           caml_new_string('", line '),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(", characters "),
             [4,0,0,0,[12,45,[4,0,0,0,0]]]]]]]]],
       caml_new_string('%s file "%s", line %d, characters %d-%d')],
     _bD_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bt_=caml_new_string("Out of memory"),
     _bu_=caml_new_string("Stack overflow"),
     _bv_=caml_new_string("Pattern matching failed"),
     _bw_=caml_new_string("Assertion failed"),
     _bx_=caml_new_string("Undefined recursive module"),
     _bp_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bq_=caml_new_string(""),
     _br_=caml_new_string(""),
     _bs_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bm_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bk_=[0,[3,0,0],caml_new_string("%S")],
     _bl_=caml_new_string("_"),
     _bN_=[3,0,3],
     _bO_=caml_new_string("."),
     _bL_=caml_new_string(">"),
     _bM_=caml_new_string("</"),
     _bJ_=caml_new_string(">"),
     _bK_=caml_new_string("<"),
     _bI_=caml_new_string("\n"),
     _bG_=caml_new_string("Format.Empty_queue"),
     _bH_=[0,caml_new_string("")],
     _bV_=[0,caml_new_string("src/core/lwt.ml"),672,35],
     _bW_=[0,caml_new_string("src/core/lwt.ml"),675,8],
     _bU_=[0,caml_new_string("src/core/lwt.ml"),511,8],
     _bT_=[0,caml_new_string("src/core/lwt.ml"),500,9],
     _bS_=caml_new_string("Lwt.wakeup_result"),
     _bR_=caml_new_string("Fatal error: exception "),
     _bQ_=caml_new_string("Lwt.Canceled"),
     _bY_=caml_new_string("Js.Error"),
     _b4_=caml_new_string("iframe"),
     _b3_=caml_new_string("img"),
     _b2_=caml_new_string("a"),
     _b1_=caml_new_string("br"),
     _b0_=caml_new_string("div"),
     _bZ_=caml_new_string("textarea"),
     _b5_=caml_new_string("Exception during Lwt.async: "),
     _b9_=[0,caml_new_string("examples/wiki/wikicreole.mll"),207,32],
     _b__=[0,caml_new_string("examples/wiki/wikicreole.mll"),216,6],
     _b$_=[0,caml_new_string("examples/wiki/wikicreole.mll"),231,6],
     _cb_=[0,caml_new_string("examples/wiki/wikicreole.mll"),285,6],
     _cc_=caml_new_string("*"),
     _ca_=[5,0],
     _b8_=[0,caml_new_string("examples/wiki/wikicreole.mll"),158,6],
     _b7_=caml_new_string("//"),
     _b6_=caml_new_string("**"),
     _cw_=caml_new_string("http://youtube.com/embed/"),
     _cm_=caml_new_string("ul"),
     _ck_=caml_new_string("ol"),
     _cg_=caml_new_string("th"),
     _ch_=caml_new_string("td"),
     _cD_=[0,caml_new_string("examples/wiki/main.ml"),33,17],
     _cE_=caml_new_string("");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    var max_int=2147483647;
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_string(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_gT_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_string(s){return output_string(stderr,s)}
    var exit_function=[0,flush_all];
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function make(n,c)
     {var s=caml_create_string(n);caml_fill_string(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_string_length(s),r=caml_create_string(len);
      caml_blit_string(s,0,r,0,len);
      return r}
    function sub(s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_string_length(s) - len | 0) < ofs))
         {var r=caml_create_string(len);
          caml_blit_string(s,ofs,r,0,len);
          return r}
      return invalid_arg(_m_)}
    function sub_string(b,ofs,len){return sub(b,ofs,len)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_n_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_o_)}
    function make$0(n,c){return make(n,c)}
    function sub$0(s,ofs,len){return sub(s,ofs,len)}
    var
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function map$0(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_gR_=l - 1 | 0,_gQ_=1;
      if(!(_gR_ < 1))
       {var i=_gQ_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _gS_=i + 1 | 0;
          if(_gR_ !== i){var i=_gS_;continue}
          break}}
      return r}
    caml_fresh_oo_id(0);
    function engine(tbl,state,buf)
     {var result=caml_lex_engine(tbl,state,buf);
      if(0 <= result)
       {buf[11] = buf[12];
        var _gP_=buf[12];
        buf[12] = [0,_gP_[1],_gP_[2],_gP_[3],buf[4] + buf[6] | 0]}
      return result}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    var Empty=[248,_q_,caml_fresh_oo_id(0)];
    caml_fresh_oo_id(0);
    function create(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_string(n$1);
      return [0,s,0,n$1,s]}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         {if(!((b[2] + more | 0) <= max_string_length))throw [0,Failure,s];
          new_len[1] = max_string_length}
        var new_buffer=caml_create_string(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_string(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_string_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _gN_=len < min_len?1:0;
      if(_gN_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_string(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _gO_=0}
      else
       var _gO_=_gN_;
      return _gO_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_string_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _s_;
         case 1:return _t_;
         case 2:return _u_;
         case 3:return _v_;
         case 4:return _w_;
         case 5:return _x_;
         default:return _y_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _a_(_z_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_A_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_B_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_C_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_I_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_J_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_K_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_L_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_M_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_N_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _gp_=function(param){return 0},
         _gq_=function(param){return 0},
         _gr_=function(param){return 0};
        return [0,function(param){return 0},_gr_,_gq_,_gp_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _gs_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_gs_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _gt_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _gt_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _gu_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _gu_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _gv_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _gv_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _gw_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _gw_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _gx_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _gx_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _gy_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _gy_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _gz_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _gz_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _gA_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _gA_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _gB_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _gC_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _gD_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _gD_,
                  _gC_,
                  _gB_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _gE_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _gE_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _gF_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _gF_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _gG_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _gG_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _gH_=function(param){caml_call1(de$12,0);return 0},
           _gI_=function(param){caml_call1(ed$12,0);return 0},
           _gJ_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _gJ_,
                  _gI_,
                  _gH_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _gK_=function(param){caml_call1(de$13,0);return 0},
           _gL_=function(param){caml_call1(ed$13,0);return 0},
           _gM_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _gM_,
                  _gL_,
                  _gK_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_R_]}
      else
       switch(ty1[0])
        {case 0:
          var _f8_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_f8_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _f9_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_f9_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _f__=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_f__,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _f$_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_f$_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _ga_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_ga_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _gb_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_gb_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _gc_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_gc_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _gd_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_gd_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _ge_=ty1[2],_gf_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_gg_=trans(_ge_,rest2$7);
              return [8,trans(_gf_,ty2),_gg_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,___];
          break;
         case 9:
          var _gh_=ty1[3],_gi_=ty1[2],_gj_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_gi_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_gj_,ty22,trans(_gh_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_$_];
          break;
         case 10:
          var _gk_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_gk_,rest2$9)]}
          throw [0,Assert_failure,_aa_];
         case 11:
          var _gl_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_gl_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_ab_];
          break;
         case 12:
          var _gm_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_gm_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ac_];
          break;
         case 13:
          var _gn_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_gn_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ad_];
          break;
         default:
          var _go_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_go_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_ae_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_U_];
        case 1:throw [0,Assert_failure,_V_];
        case 2:throw [0,Assert_failure,_W_];
        case 3:throw [0,Assert_failure,_X_];
        case 4:throw [0,Assert_failure,_Y_];
        case 5:throw [0,Assert_failure,_S_];
        case 6:throw [0,Assert_failure,_T_];
        default:throw [0,Assert_failure,_Z_]}}
    var Type_mismatch=[248,_af_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _f7_=match[2];
        if(typeof _f7_ !== "number" && 2 === _f7_[0])
         {var rest$0=_f7_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _fF_=type_padding(pad,fmtty),
           _fG_=_fF_[2],
           _fH_=_fF_[1];
          if(typeof _fG_ !== "number" && 1 === _fG_[0])
           {var
             fmtty_rest$1=_fG_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_fH_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _fI_=type_padding(pad$0,fmtty),
           _fJ_=_fI_[2],
           _fK_=_fI_[1];
          if(typeof _fJ_ !== "number" && 1 === _fJ_[0])
           {var
             fmtty_rest$2=_fJ_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_fK_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _fL_=type_padprec(pad$1,prec,fmtty),
           _fM_=_fL_[3],
           _fN_=_fL_[2],
           _fO_=_fL_[1];
          if(typeof _fM_ !== "number" && 2 === _fM_[0])
           {var
             fmtty_rest$3=_fM_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_fO_,_fN_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _fP_=type_padprec(pad$2,prec$0,fmtty),
           _fQ_=_fP_[3],
           _fR_=_fP_[2],
           _fS_=_fP_[1];
          if(typeof _fQ_ !== "number" && 3 === _fQ_[0])
           {var
             fmtty_rest$4=_fQ_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_fS_,_fR_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _fT_=type_padprec(pad$3,prec$1,fmtty),
           _fU_=_fT_[3],
           _fV_=_fT_[2],
           _fW_=_fT_[1];
          if(typeof _fU_ !== "number" && 4 === _fU_[0])
           {var
             fmtty_rest$5=_fU_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_fW_,_fV_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _fX_=type_padprec(pad$4,prec$2,fmtty),
           _fY_=_fX_[3],
           _fZ_=_fX_[2],
           _f0_=_fX_[1];
          if(typeof _fY_ !== "number" && 5 === _fY_[0])
           {var
             fmtty_rest$6=_fY_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_f0_,_fZ_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _f1_=type_padprec(pad$5,prec$3,fmtty),
           _f2_=_f1_[3],
           _f3_=_f1_[2],
           _f4_=_f1_[1];
          if(typeof _f2_ !== "number" && 6 === _f2_[0])
           {var
             fmtty_rest$7=_f2_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_f4_,_f3_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _f5_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_f5_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _f6_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_f6_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_f6_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _fD_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_fD_))
             throw Type_mismatch;
            var _fE_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_fE_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _fC_=2 === padty$0?48:32,res=make(width$0,_fC_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_string_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_string_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_string_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_string_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _fB_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _fA_=match$0 - 34 | 0;
            if(58 < _fA_ >>> 0)
             if(93 <= _fA_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_fA_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _fB_=switch$0?1:1}
        if(_fB_)
         {var n=[0,0],_ft_=caml_ml_string_length(str) - 1 | 0,_fs_=0;
          if(!(_ft_ < 0))
           {var i$0=_fs_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _fx_=match - 34 | 0;
                if(58 < _fx_ >>> 0)
                 if(93 <= _fx_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_fx_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _fy_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _fy_=4;break;case 1:var _fy_=2;break}
              n[1] = n[1] + _fy_ | 0;
              var _fz_=i$0 + 1 | 0;
              if(_ft_ !== i$0){var i$0=_fz_;continue}
              break}}
          if(n[1] === caml_ml_string_length(str))
           var str$0=copy(str);
          else
           {var s=caml_create_string(n[1]);
            n[1] = 0;
            var _fv_=caml_ml_string_length(str) - 1 | 0,_fu_=0;
            if(!(_fv_ < 0))
             {var i=_fu_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _fw_=i + 1 | 0;
                if(_fv_ !== i){var i=_fw_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _fr_=_ag_;break;
        case 1:var _fr_=_ah_;break;
        case 2:var _fr_=_ai_;break;
        case 3:var _fr_=_aj_;break;
        case 4:var _fr_=_ak_;break;
        case 5:var _fr_=_al_;break;
        case 6:var _fr_=_am_;break;
        case 7:var _fr_=_an_;break;
        case 8:var _fr_=_ao_;break;
        case 9:var _fr_=_ap_;break;
        case 10:var _fr_=_aq_;break;
        case 11:var _fr_=_ar_;break;
        default:var _fr_=_as_}
      return caml_format_int(_fr_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _fq_=_aG_;break;
        case 1:var _fq_=_aH_;break;
        case 2:var _fq_=_aI_;break;
        case 3:var _fq_=_aJ_;break;
        case 4:var _fq_=_aK_;break;
        case 5:var _fq_=_aL_;break;
        case 6:var _fq_=_aM_;break;
        case 7:var _fq_=_aN_;break;
        case 8:var _fq_=_aO_;break;
        case 9:var _fq_=_aP_;break;
        case 10:var _fq_=_aQ_;break;
        case 11:var _fq_=_aR_;break;
        default:var _fq_=_aS_}
      return caml_format_int(_fq_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _fp_=_aT_;break;
        case 1:var _fp_=_aU_;break;
        case 2:var _fp_=_aV_;break;
        case 3:var _fp_=_aW_;break;
        case 4:var _fp_=_aX_;break;
        case 5:var _fp_=_aY_;break;
        case 6:var _fp_=_aZ_;break;
        case 7:var _fp_=_a0_;break;
        case 8:var _fp_=_a1_;break;
        case 9:var _fp_=_a2_;break;
        case 10:var _fp_=_a3_;break;
        case 11:var _fp_=_a4_;break;
        default:var _fp_=_a5_}
      return caml_format_int(_fp_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _fo_=_at_;break;
        case 1:var _fo_=_au_;break;
        case 2:var _fo_=_av_;break;
        case 3:var _fo_=_aw_;break;
        case 4:var _fo_=_ax_;break;
        case 5:var _fo_=_ay_;break;
        case 6:var _fo_=_az_;break;
        case 7:var _fo_=_aA_;break;
        case 8:var _fo_=_aB_;break;
        case 9:var _fo_=_aC_;break;
        case 10:var _fo_=_aD_;break;
        case 11:var _fo_=_aE_;break;
        default:var _fo_=_aF_}
      return caml_int64_format(_fo_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_string_length(s);
          if(0 === l)return s;
          var r=caml_create_string(l),_fi_=l - 1 | 0,_fh_=0;
          if(!(_fi_ < 0))
           {var i=_fh_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _fj_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(!switch$1)var _fj_=c;
              caml_string_unsafe_set(r,i,_fj_);
              var _fk_=i + 1 | 0;
              if(_fi_ !== i){var i=_fk_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _fl_=_a6_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _fl_=buffer_contents(buf)}
      var str=caml_format_float(_fl_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_a7_:_a8_;
        if(4 <= match$0)return _a9_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _fn_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _fm_=match - 46 | 0,
             switch$2=
              23 < _fm_ >>> 0?55 === _fm_?1:0:21 < (_fm_ - 1 | 0) >>> 0?1:0;
            if(!switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _fn_=1}
          return _fn_?str:_a_(str,_a__)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _fe_=pad[2],_ff_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_ff_,_fe_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_ff_,_fe_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_ff_,_fe_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _fg_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_fg_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_fg_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_fg_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_string_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_g_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_h_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_i_,switch$0=2;break;
                  case 9:var str=_j_,switch$0=2;break;
                  case 10:var str=_k_,switch$0=2;break;
                  case 13:var str=_l_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_string(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_string(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _e$_=pad$5[2],_fa_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_fa_,_e$_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_fa_,_e$_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_fa_,_e$_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _fb_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_fb_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_fb_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_fb_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {var _fd_=b?_b_:_c_;
             return make_printf(k$0,o,[4,acc$0,_fd_],rest$8)};
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _fc_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _fc_[2] === "number")
              {var fmt=_fc_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _e9_=fmt$0[1];
           if(0 === _e9_[0])
            {var
              rest$13=fmt$0[2],
              match=_e9_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_e9_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_a$_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_ba_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bb_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:throw [0,Assert_failure,_bc_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _e__=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_e__)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_e__])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_e8_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bd_];
         default:throw [0,Assert_failure,_be_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _e7_=[8,acc,_bf_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_e7_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_e7_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _e6_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_e6_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_e6_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _e4_=acc$0[2],_e5_=acc$0[1];
           if(0 === _e4_[0])
            {var acc$1=_e4_[1];
             output_acc(o,_e5_);
             output_string(o,_bg_);
             var acc$0=acc$1;
             continue}
           var acc$2=_e4_[1];
           output_acc(o,_e5_);
           output_string(o,_bh_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _e2_=acc$0[2],_e3_=acc$0[1];
           if(0 === _e2_[0])
            {var acc$1=_e2_[1];
             strput_acc(b,_e3_);
             add_string(b,_bi_);
             var acc$0=acc$1;
             continue}
           var acc$2=_e2_[1];
           strput_acc(b,_e3_);
           add_string(b,_bj_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_e1_=0;
      return make_printf
              (function(o,acc){output_acc(o,acc);return 0},oc,_e1_,fmt)}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(param,acc)
       {var b=create(64);strput_acc(b,acc);return sub_string(b[1],0,b[2])}
      return make_printf(k,0,0,fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var f=x[i$1 + 1];
      if(caml_obj_is_block(f))
       {if(caml_obj_tag(f) === 252)return caml_call1(sprintf(_bk_),f);
        if(caml_obj_tag(f) === 253)
         {var s=caml_format_float(_e_,f),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return _a_(s,_d_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bl_}
      return caml_call1(sprintf(_bm_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bn_;
      var _eZ_=other_fields(x,i + 1 | 0),_e0_=field(x,i);
      return caml_call2(sprintf(_bo_),_e0_,_eZ_)}
    function fields(x)
     {var n=x.length - 1;
      if(2 < n >>> 0)
       {var _eW_=other_fields(x,2),_eX_=field(x,1);
        return caml_call2(sprintf(_bp_),_eX_,_eW_)}
      switch(n)
       {case 0:return _bq_;
        case 1:return _br_;
        default:var _eY_=field(x,1);return caml_call1(sprintf(_bs_),_eY_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _eU_=caml_call1(hd,x),_eT_=_eU_}catch(_eV_){var _eT_=0}
            if(_eT_){var s=_eT_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bt_;
          if(x === Stack_overflow)return _bu_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bv_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bw_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bx_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _a_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function convert_raw_backtrace(rbckt)
     {try
       {var
         _eQ_=
          [0,
           map$0
            (function(_eS_){return caml_convert_raw_backtrace_slot(_eS_)},
             rbckt)];
        return _eQ_}
      catch(_eR_)
       {_eR_ = caml_wrap_exception(_eR_);
        if(_eR_[1] === Failure)return 0;
        throw _eR_}}
    function print_backtrace(outchan)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_eO_=a.length - 1 - 1 | 0,_eN_=0;
        if(!(_eO_ < 0))
         {var i=_eN_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[i + 1],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_by_:_bz_:0 === i?_bA_:_bB_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              endchar=slot[5],
              startchar=slot[4],
              lineno=slot[3],
              filename=slot[2],
              is_raise=slot[1],
              _eL_=info(is_raise),
              match=
               [0,
                caml_call5
                 (sprintf(_bC_),_eL_,filename,lineno,startchar,endchar)];
            else
             if(0 === slot[1])
              var _eM_=info(0),match=[0,caml_call1(sprintf(_bD_),_eM_)];
             else
              var match=0;
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bE_),str)}
            var _eP_=i + 1 | 0;
            if(_eO_ !== i){var i=_eP_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bF_)}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function add_queue(x,q)
     {var c=[0,[0,x,0]],_eK_=q[1];
      if(_eK_){var cell=_eK_[1];q[1] = c;cell[2] = c;return 0}
      q[1] = c;
      q[2] = c;
      return 0}
    var Empty_queue=[248,_bG_,caml_fresh_oo_id(0)];
    function take_queue(q)
     {var _eJ_=q[2];
      if(_eJ_)
       {var match=_eJ_[1],x=match[1],tl=match[2];
        q[2] = tl;
        if(0 === tl)q[1] = 0;
        return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[27])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       y=(state[6] - width | 0) + offset | 0,
       _eI_=state[8],
       real_indent=caml_lessequal(_eI_,y)?_eI_:y;
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return pp_output_spaces(state,state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return pp_output_spaces(state,width)}
    function pp_force_break_line(state)
     {var _eF_=state[2];
      if(_eF_)
       {var
         match=_eF_[1],
         width=match[2],
         bl_ty=match[1],
         _eG_=state[9] < width?1:0;
        if(_eG_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _eH_=0}
        else
         var _eH_=_eG_;
        return _eH_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[27]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _eu_=state[3];
          if(_eu_)
           {var
             match=_eu_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _ev_=state[2];
          if(_ev_){var ls=_ev_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _ew_=state[3];
          if(_ew_){var ls$0=_ew_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _ex_=state[2];
          if(_ex_)
           {var match$0=_ex_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _ey_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _ey_?pp_skip_token(state):_ey_;
         default:
          var _ez_=state[5];
          if(_ez_)
           {var
             tags=_ez_[2],
             tag_name=_ez_[1],
             marker=caml_call1(state[24],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_eA_=state[2];
          if(_eA_)
           {var match$1=_eA_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _eB_=state[3];
          if(_eB_)
           {var
             match$2=_eB_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _eC_=tabs$0[1];
            if(_eC_)
             {var x=_eC_[1];
              try
               {var _eD_=find(insertion_point,tabs$0[1]),x$0=_eD_}
              catch(_eE_)
               {_eE_ = caml_wrap_exception(_eE_);
                if(_eE_ !== Not_found)throw _eE_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[23],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _eq_=state[27][2];
        if(_eq_)
         {var
           match=_eq_[1],
           x=match[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _er_=size < 0?1:0,
           _es_=_er_?(state[13] - state[12] | 0) < state[9]?1:0:_er_,
           _et_=1 - _es_;
          if(_et_)
           {take_queue(state[27]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _et_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _eo_=advance_loop(state);return _eo_}
      catch(_ep_)
       {_ep_ = caml_wrap_exception(_ep_);
        if(_ep_ === Empty_queue)return 0;
        throw _ep_}}
    var q_elem=[0,-1,_bH_,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _ek_=state[1];
      if(_ek_)
       {var
         match=_ek_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_ek_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _em_=1 - ty,
             _en_=
              _em_?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):_em_;
            return _en_;
           case 1:
           case 2:
            var
             _el_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _el_
           }
        return 0}
      return 0}
    var blank_line=make$0(80,32);
    function default_pp_mark_open_tag(s){return _a_(_bK_,_a_(s,_bJ_))}
    function default_pp_mark_close_tag(s){return _a_(_bM_,_a_(s,_bL_))}
    function default_pp_print_open_tag(_ej_){return 0}
    function default_pp_print_close_tag(_ei_){return 0}
    function make_formatter(output,flush)
     {function i(_eh_){return 0}
      function h(_eg_){return 0}
      var pp_queue=[0,0,0],sys_tok=[0,-1,_bN_,0];
      add_queue(sys_tok,pp_queue);
      var
       sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom],
       ppf=
        [0,
         sys_scan_stack,
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max_int,
         _bO_,
         output,
         flush,
         h,
         i,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      ppf[19] = function(_ef_){return caml_call3(ppf[17],_bI_,0,1)};
      ppf[20]
      =
      function(n$1)
       {var n=n$1;
        for(;;)
         {var _ee_=0 < n?1:0;
          if(_ee_)
           {if(80 < n)
             {caml_call3(ppf[17],blank_line,0,80);
              var n$0=n - 80 | 0,n=n$0;
              continue}
            return caml_call3(ppf[17],blank_line,0,n)}
          return _ee_}};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _ed_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if(0 <= ofs)
                  if(0 <= len)
                   if(!((caml_ml_string_length(s) - len | 0) < ofs))
                    return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_f_)},
               _ed_)}
    var stdbuf=create(512),state=formatter_of_out_channel(stdout);
    formatter_of_out_channel(stderr);
    function _bP_(_ec_){return 0}
    make_formatter
     (function(s,offset,len)
       {var _d$_=offset < 0?1:0;
        if(_d$_)
         var _ea_=_d$_;
        else
         var
          _eb_=len < 0?1:0,
          _ea_=_eb_ || (caml_ml_string_length(s) < (offset + len | 0)?1:0);
        if(_ea_)invalid_arg(_r_);
        var new_position=stdbuf[2] + len | 0;
        if(stdbuf[3] < new_position)resize(stdbuf,len);
        blit$0(s,offset,stdbuf[1],stdbuf[2],len);
        stdbuf[2] = new_position;
        return 0},
      _bP_);
    var g=exit_function[1];
    exit_function[1]
    =
    function(param)
     {for(;;)
       {if(1 < state[14])
         {if(1 < state[14])
           {if(state[14] < state[15])
             {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
            state[14] = state[14] - 1 | 0}
          continue}
        state[13] = pp_infinity;
        advance_left(state);
        state[12] = 1;
        state[13] = 1;
        var _d9_=state[27];
        _d9_[1] = 0;
        _d9_[2] = 0;
        clear_scan_stack(state);
        state[2] = 0;
        state[3] = 0;
        state[4] = 0;
        state[5] = 0;
        state[10] = 0;
        state[14] = 0;
        state[9] = state[6];
        state[14] = state[14] + 1 | 0;
        var br_ty=3,indent=0;
        if(state[14] < state[15])
         {var tok$0=[0,-state[13] | 0,[3,indent,br_ty],0];
          pp_enqueue(state,tok$0);
          state[1] = [0,[0,state[13],tok$0],state[1]]}
        else
         if(state[14] === state[15])
          {var
            _d__=state[16],
            size=caml_ml_string_length(_d__),
            tok=[0,size,[0,_d__],size];
           pp_enqueue(state,tok);
           advance_left(state)}
        caml_call1(state[18],0);
        return caml_call1(g,0)}};
    caml_fresh_oo_id(0);
    function create$0(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var Canceled=[248,_bQ_,caml_fresh_oo_id(0)],current_data=[0,0];
    function repr_rec(t)
     {var _d8_=t[1];
      if(3 === _d8_[0])
       {var t$0=_d8_[1],t$1=repr_rec(t$0);
        if(t$1 !== t$0)t[1] = [3,t$1];
        return t$1}
      return t}
    function repr(t){return repr_rec(t)}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_bR_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         do_at_exit(0);
         return caml_sys_exit(2)}];
    function call_unsafe(f,x)
     {try
       {var _d7_=caml_call1(f,x);return _d7_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    function run_waiters_rec$0(counter,state,ws,rem)
     {var ws$0=ws,rem$0=rem;
      for(;;)
       if(typeof ws$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_waiters_rec_next(counter$0,state,rem$0)}
         return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0])}
       else
        switch(ws$0[0])
         {case 0:
           var _d6_=ws$0[1][1];
           if(_d6_)
            {var f=_d6_[1];
             caml_call1(f,state);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return run_waiters_rec_next(counter$1,state,rem$0)}
             return caml_trampoline_return
                     (run_waiters_rec_next,[0,state,rem$0])}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_waiters_rec_next(counter$2,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          case 1:
           var f$0=ws$0[1];
           caml_call1(f$0,state);
           if(counter < 50)
            {var counter$3=counter + 1 | 0;
             return run_waiters_rec_next(counter$3,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          default:
           var
            ws2=ws$0[2],
            ws$1=ws$0[1],
            rem$1=[0,ws2,rem$0],
            ws$0=ws$1,
            rem$0=rem$1;
           continue}}
    function run_waiters_rec_next(counter,state,rem)
     {if(rem)
       {var rem$0=rem[2],ws=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_waiters_rec$0(counter$0,state,ws,rem$0)}
        return caml_trampoline_return(run_waiters_rec$0,[0,state,ws,rem$0])}
      return 0}
    function run_waiters_rec(state,ws,rem)
     {return caml_trampoline(run_waiters_rec$0(0,state,ws,rem))}
    function run_cancel_handlers_rec$0(counter,chs,rem)
     {var chs$0=chs,rem$0=rem;
      for(;;)
       if(typeof chs$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_cancel_handlers_rec_next(counter$0,rem$0)}
         return caml_trampoline_return(run_cancel_handlers_rec_next,[0,rem$0])}
       else
        switch(chs$0[0])
         {case 0:
           var f=chs$0[2],data=chs$0[1];
           current_data[1] = data;
           call_unsafe(f,0);
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$1,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          case 1:
           var n=chs$0[1];
           if(n[4]){n[4] = 0;n[1][2] = n[2];n[2][1] = n[1]}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$2,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          default:
           var
            chs2=chs$0[2],
            chs$1=chs$0[1],
            rem$1=[0,chs2,rem$0],
            chs$0=chs$1,
            rem$0=rem$1;
           continue}}
    function run_cancel_handlers_rec_next(counter,rem)
     {if(rem)
       {var rem$0=rem[2],chs=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_cancel_handlers_rec$0(counter$0,chs,rem$0)}
        return caml_trampoline_return(run_cancel_handlers_rec$0,[0,chs,rem$0])}
      return 0}
    function run_cancel_handlers_rec(chs,rem)
     {return caml_trampoline(run_cancel_handlers_rec$0(0,chs,rem))}
    function unsafe_run_waiters(sleeper,state)
     {var
       switch$0=
        1 === state[0]
         ?state[1] === Canceled?(run_cancel_handlers_rec(sleeper[4],0),1):0
         :0;
      return run_waiters_rec(state,sleeper[2],0)}
    var wakening=[0,0],to_wakeup=[0,0,0,0];
    function wakeup(t$0,v)
     {var t=repr_rec(t$0),_d5_=t[1];
      switch(_d5_[0])
       {case 1:if(_d5_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_d5_[1],state=[0,v];
         t[1] = state;
         var
          snapshot=current_data[1],
          already_wakening=wakening[1]?1:(wakening[1] = 1,0);
         unsafe_run_waiters(sleeper,state);
         if(already_wakening){current_data[1] = snapshot;return 0}
         for(;;)
          {if(0 === to_wakeup[1])
            {wakening[1] = 0;current_data[1] = snapshot;return 0}
           var _d2_=to_wakeup[2];
           if(_d2_)
            {var _d3_=_d2_[1],_d4_=_d2_[2];
             if(_d4_)
              {to_wakeup[1] = to_wakeup[1] - 1 | 0;to_wakeup[2] = _d4_}
             else
              {to_wakeup[1] = 0;to_wakeup[2] = 0;to_wakeup[3] = 0}
             unsafe_run_waiters(_d3_[1],_d3_[2]);
             continue}
           throw Empty}
        }
      return invalid_arg(_bS_)}
    function append$0(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[2,l1,l2]}
    function cleanup(ws)
     {if(typeof ws !== "number")
       switch(ws[0])
        {case 0:if(!ws[1][1])return 0;break;
         case 2:
          var l2=ws[2],l1=ws[1],_d1_=cleanup(l2);
          return append$0(cleanup(l1),_d1_)
         }
      return ws}
    function connect(t1,t2)
     {var t1$0=repr(t1),t2$0=repr(t2),_dW_=t1$0[1];
      if(2 === _dW_[0])
       {var sleeper1=_dW_[1];
        if(t1$0 === t2$0)return 0;
        var _dX_=t2$0[1];
        if(2 === _dX_[0])
         {var sleeper2=_dX_[1];
          t2$0[1] = [3,t1$0];
          sleeper1[1] = sleeper2[1];
          var
           waiters=append$0(sleeper1[2],sleeper2[2]),
           removed=sleeper1[3] + sleeper2[3] | 0;
          if(42 < removed)
           {sleeper1[3] = 0;sleeper1[2] = cleanup(waiters)}
          else
           {sleeper1[3] = removed;sleeper1[2] = waiters}
          var
           _dY_=sleeper2[4],
           _dZ_=sleeper1[4],
           _d0_=
            typeof _dZ_ === "number"
             ?_dY_
             :typeof _dY_ === "number"?_dZ_:[2,_dZ_,_dY_];
          sleeper1[4] = _d0_;
          return 0}
        t1$0[1] = _dX_;
        return unsafe_run_waiters(sleeper1,_dX_)}
      throw [0,Assert_failure,_bT_]}
    function fast_connect(t,state)
     {var t$0=repr(t),_dV_=t$0[1];
      if(2 === _dV_[0])
       {var sleeper=_dV_[1];
        t$0[1] = state;
        return unsafe_run_waiters(sleeper,state)}
      throw [0,Assert_failure,_bU_]}
    function fail(e){return [0,[1,e]]}
    function bind(t,f)
     {var t$0=repr(t),_dS_=t$0[1];
      switch(_dS_[0])
       {case 0:var v=_dS_[1];return caml_call1(f,v);
        case 1:return [0,_dS_];
        case 2:
         var
          sleeper=_dS_[1],
          res=[0,[2,[0,[0,[0,t$0]],0,0,0]]],
          data=current_data[1],
          waiter$1=
           function(state)
            {switch(state[0])
              {case 0:
                var v=state[1];
                current_data[1] = data;
                try
                 {var _dU_=caml_call1(f,v),_dT_=_dU_}
                catch(exn){exn = caml_wrap_exception(exn);var _dT_=fail(exn)}
                return connect(res,_dT_);
               case 1:return fast_connect(res,state);
               default:throw [0,Assert_failure,_bV_]}},
          waiter$0=[1,waiter$1],
          _dR_=sleeper[2],
          waiter=typeof _dR_ === "number"?waiter$0:[2,waiter$0,_dR_];
         sleeper[2] = waiter;
         return res;
        default:throw [0,Assert_failure,_bW_]}}
    var pause_hook=[0,function(_dQ_){return 0}],s1=create$0(0),_bX_=[0,0];
    function wakeup_paused(param)
     {if(s1[2] === s1){_bX_[1] = 0;return 0}
      var seq=create$0(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _bX_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _dP_=curr !== seq?1:0;
        if(_dP_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _dP_}}
    var
     window=joo_global_object,
     no_handler=null,
     undefined$0=undefined,
     false$0=false,
     array_constructor=window.Array,
     Error=[248,_bY_,caml_fresh_oo_id(0)],
     exn=[0,Error,{}],
     slot=caml_obj_tag(exn) === 248?exn:exn[1];
    caml_register_named_value(caml_new_string("jsError"),slot);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    function appendChild(p,n){p.appendChild(n);return 0}
    var doc=window.document;
    function opt_iter(x,f){if(x){var v=x[1];return caml_call1(f,v)}return 0}
    function createElement(doc,name)
     {return doc.createElement(name.toString())}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc$0,elt)
     {for(;;)
       {if(0 === type)if(0 === name)return createElement(doc$0,elt);
        var _dJ_=createElementSyntax[1];
        if(785140586 === _dJ_)
         {try
           {var
             el=doc.createElement('<input name="x">'),
             _dM_=el.tagName.toLowerCase() === "input"?1:0,
             _dN_=_dM_?el.name === "x"?1:0:_dM_,
             _dK_=_dN_}
          catch(_dO_){var _dK_=0}
          var _dL_=_dK_?982028505:-1003883683;
          createElementSyntax[1] = _dL_;
          continue}
        if(982028505 <= _dJ_)
         {var a=new array_constructor();
          a.push("<",elt.toString());
          opt_iter
           (type,
            function(t){a.push(' type="',caml_js_html_escape(t),'"');return 0});
          opt_iter
           (name,
            function(n){a.push(' name="',caml_js_html_escape(n),'"');return 0});
          a.push(">");
          return doc$0.createElement(a.join(""))}
        var res=createElement(doc$0,elt);
        opt_iter(type,function(t){return res.type = t});
        opt_iter(name,function(n){return res.name = n});
        return res}}
    function createDiv(doc){return unsafeCreateElement(doc,_b0_)}
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    var console=caml_js_get_console(0),overflow_limit=2147483e3;
    function sleep(d)
     {var t=[0,[2,[0,1,0,0,0]]],d$0=d * 1e3;
      function callback(_dI_){return wakeup(t,_dI_)}
      var id=[0,0];
      function loop(step,param)
       {if(2147483e3 < step)
         var step$0=overflow_limit,remain=step - 2147483e3;
        else
         var step$0=step,remain=0;
        var cb=remain == 0?callback:function(_dH_){return loop(remain,_dH_)};
        id[1] = [0,window.setTimeout(caml_js_wrap_callback(cb),step$0)];
        return 0}
      loop(d$0,0);
      function f(param)
       {var _dG_=id[1];
        if(_dG_){var x=_dG_[1];id[1] = 0;return window.clearTimeout(x)}
        return 0}
      var _dE_=repr(t)[1];
      switch(_dE_[0])
       {case 1:var switch$0=_dE_[1] === Canceled?(call_unsafe(f,0),1):0;break;
        case 2:
         var
          sleeper=_dE_[1],
          handler=[0,current_data[1],f],
          _dF_=sleeper[4],
          handler$0=typeof _dF_ === "number"?handler:[2,handler,_dF_];
         sleeper[4] = handler$0;
         var switch$0=1;
         break;
        default:var switch$0=0}
      return t}
    function f(param)
     {return 1 === param
              ?(window.setTimeout(caml_js_wrap_callback(wakeup_paused),0),0)
              :0}
    pause_hook[1] = f;
    function prerr_string$0(s){return console.log(s.toString())}
    async_exception_hook[1]
    =
    function(exn)
     {prerr_string$0(_b5_);
      prerr_string$0(to_string(exn));
      return print_backtrace(stderr)};
    function count(c,s)
     {var n=[0,0],_dC_=caml_ml_string_length(s) - 1 | 0,_dB_=0;
      if(!(_dC_ < 0))
       {var i=_dB_;
        for(;;)
         {if(caml_string_get(s,i) === c)n[1]++;
          var _dD_=i + 1 | 0;
          if(_dC_ !== i){var i=_dD_;continue}
          break}}
      return n[1]}
    function push(c,v)
     {var _dz_=c[12];
      if(typeof _dz_ !== "number" && 1 === _dz_[0])
       {c[8] = [0,v,c[8]];return 0}
      var _dA_=c[7];
      c[7] = [0,caml_call1(c[1][21],v),_dA_];
      return 0}
    function push_string(c,s){return push(c,caml_call1(c[1][1],s))}
    function push_chars(c,lexbuf){return push_string(c,lexeme(lexbuf))}
    function set_style(c,style,v)
     {return 0 === style?(c[3] = v,0):(c[2] = v,0)}
    function pop_style(c,style,inline,stack)
     {var elt=0 === style?c[1][2]:c[1][3],inline$0=c[7];
      c[12] = stack;
      c[7] = inline;
      push(c,caml_call1(elt,rev(inline$0)));
      return set_style(c,style,0)}
    function style_change(c,style)
     {var _dx_=0 === style?c[3]:c[2];
      if(_dx_)
       {var _dy_=c[12];
        if(typeof _dy_ !== "number" && 0 === _dy_[0])
         {var stack=_dy_[3],inline=_dy_[2],s=_dy_[1];
          if(s === style)return pop_style(c,style,inline,stack)}
        return 0 === style?push_string(c,_b6_):push_string(c,_b7_)}
      c[12] = [0,style,c[7],c[12]];
      c[7] = 0;
      return set_style(c,style,1)}
    function pop_link(c,addr,stack)
     {c[12] = stack;
      var _dv_=c[7],_dw_=rev(c[8]);
      c[7] = [0,caml_call2(c[1][7],addr,_dw_),_dv_];
      c[8] = 0;
      c[5] = 0;
      return 0}
    function close_entry(c)
     {var _ds_=c[12];
      if(typeof _ds_ !== "number")
       switch(_ds_[0])
        {case 5:
          var _dt_=c[12];
          c[12] = [6,[0,[0,0,rev(c[7])],0],_dt_];
          c[7] = 0;
          return 1;
         case 6:return 1;
         case 7:
          var _du_=_ds_[2];
          if(typeof _du_ !== "number" && 6 === _du_[0])
           {var stack=_du_[2],entries=_du_[1],heading=_ds_[1];
            c[12] = [6,[0,[0,heading,rev(c[7])],entries],stack];
            c[7] = 0;
            return 1}
          break
         }
      return 0}
    function close_row(c)
     {var _dp_=close_entry(c);
      if(_dp_)
       {var _dq_=c[12];
        if(typeof _dq_ !== "number")
         switch(_dq_[0])
          {case 5:return 1;
           case 6:
            var _dr_=_dq_[2];
            if(typeof _dr_ !== "number" && 5 === _dr_[0])
             {var rows=_dr_[1],entries=_dq_[1];
              c[12] = [5,[0,rev(entries),rows]];
              return 1}
            break
           }
        throw [0,Assert_failure,_b8_]}
      return _dp_}
    function end_paragraph(c,lev)
     {for(;;)
       {var _dg_=c[12];
        if(typeof _dg_ === "number")
         {if(0 !== c[7])
           {var _dh_=c[11],_di_=rev(c[7]);
            c[11] = [0,caml_call1(c[1][9],_di_),_dh_];
            c[7] = 0}
          c[12] = 0;
          return 0}
        else
         switch(_dg_[0])
          {case 0:
            var stack=_dg_[3],inline=_dg_[2],style=_dg_[1];
            pop_style(c,style,inline,stack);
            continue;
           case 1:
            var stack$0=_dg_[2],addr=_dg_[1];
            pop_link(c,addr,stack$0);
            continue;
           case 2:
            var l=_dg_[1],switcher=l - 1 | 0;
            if(4 < switcher >>> 0)
             var f=c[1][16];
            else
             switch(switcher)
              {case 0:var f=c[1][11];break;
               case 1:var f=c[1][12];break;
               case 2:var f=c[1][13];break;
               case 3:var f=c[1][14];break;
               default:var f=c[1][15]}
            var _dj_=c[11];
            c[11] = [0,caml_call1(f,rev(c[7])),_dj_];
            c[7] = 0;
            c[4] = 0;
            c[12] = 0;
            return 0;
           case 3:
            var stack$1=_dg_[1],_dk_=c[10];
            c[10] = [0,[0,rev(c[7]),0],_dk_];
            c[12] = stack$1;
            c[7] = 0;
            continue;
           case 4:
            var stack$2=_dg_[3],lst=_dg_[2],kind=_dg_[1],_dl_=lev < c[6]?1:0;
            if(_dl_)
             {c[6] = c[6] - 1 | 0;
              var
               elt=0 === kind?c[1][17]:c[1][18],
               cur_lst=caml_call1(elt,rev(c[10]));
              if(0 === c[6])
               c[11] = [0,cur_lst,c[11]];
              else
               {if(lst)
                 {var _dm_=lst[1];
                  if(_dm_[2])
                   var switch$0=0;
                  else
                   {var rem=lst[2],l$0=_dm_[1];
                    c[10] = [0,[0,l$0,[0,cur_lst]],rem];
                    var switch$0=1}}
                else
                 var switch$0=0;
                if(!switch$0)throw [0,Assert_failure,_b9_]}
              c[12] = stack$2;
              continue}
            return _dl_;
           case 5:
            var rows=_dg_[1],_dn_=c[11],_do_=rev(rows);
            c[11] = [0,caml_call1(c[1][20],_do_),_dn_];
            c[12] = 0;
            return 0;
           case 6:throw [0,Assert_failure,_b__];
           default:close_row(c);continue}}}
    function start_list_item(c,kind,lev)
     {var _dd_=lev === (c[6] + 1 | 0)?1:0;
      if(_dd_)
       var _de_=_dd_,switch$0=0;
      else
       {var _df_=lev <= c[6]?1:0;
        if(_df_)
         {var n$1=c[6] - lev | 0,stack=c[12],n=n$1;
          for(;;)
           {if(typeof stack === "number")
             var switch$1=1;
            else
             switch(stack[0])
              {case 0:var stack$0=stack[3],stack=stack$0;continue;
               case 3:var stack$1=stack[1],stack=stack$1;continue;
               case 4:
                var stack$2=stack[3],k=stack[1];
                if(0 !== n){var n$0=n - 1 | 0,stack=stack$2,n=n$0;continue}
                var correct=k === kind?1:0,switch$0=1,switch$1=0;
                break;
               default:var switch$1=1}
            if(switch$1)throw [0,Assert_failure,_b$_];
            break}}
        else
         var _de_=_df_,switch$0=0}
      if(!switch$0)var correct=_de_;
      if(1 !== lev)if(!correct)return 0;
      var lev$0=correct?lev:0;
      end_paragraph(c,lev$0);
      if(lev === c[6])
       c[12] = [3,c[12]];
      else
       {c[6] = lev;c[12] = [3,[4,kind,c[10],c[12]]];c[10] = 0}
      return 1}
    function start_table_row(c,heading)
     {if(1 - close_row(c)){end_paragraph(c,0);c[12] = _ca_}
      c[12] = [7,heading,[6,0,c[12]]];
      return 0}
    function parse_bol$0(counter,c,lexbuf)
     {a:
      for(;;)
       {var ocaml_lex_state=0;
        for(;;)
         {var
           ocaml_lex_state$0=
            engine(ocaml_lex_tables,ocaml_lex_state,lexbuf);
          if(8 < ocaml_lex_state$0 >>> 0)
           {caml_call1(lexbuf[1],lexbuf);
            var ocaml_lex_state=ocaml_lex_state$0;
            continue}
          switch(ocaml_lex_state$0)
           {case 0:end_paragraph(c,0);continue a;
            case 1:
             end_paragraph(c,0);
             if(0 === c[12])
              {c[12] = [2,count(61,lexeme(lexbuf))];
               c[4] = 1;
               if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return parse_rem(counter$0,c,lexbuf)}
               return caml_trampoline_return(parse_rem,[0,c,lexbuf])}
             throw [0,Assert_failure,_cb_];
            case 2:
             var lev=count(42,lexeme(lexbuf));
             if(1 - start_list_item(c,0,lev))
              {var s=lexeme(lexbuf),l=caml_ml_string_length(s) - lev | 0;
               if(0 < l)push_string(c,sub$0(s,0,l));
               var _c8_=lev / 2 | 0,_c7_=1;
               if(!(_c8_ < 1))
                {var i=_c7_;
                 for(;;)
                  {style_change(c,0);
                   var _c9_=i + 1 | 0;
                   if(_c8_ !== i){var i=_c9_;continue}
                   break}}
               if(1 === (lev & 1))push_string(c,_cc_)}
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return parse_rem(counter$1,c,lexbuf)}
             return caml_trampoline_return(parse_rem,[0,c,lexbuf]);
            case 3:
             var lev$0=count(35,lexeme(lexbuf));
             if(1 - start_list_item(c,1,lev$0))push_chars(c,lexbuf);
             if(counter < 50)
              {var counter$2=counter + 1 | 0;
               return parse_rem(counter$2,c,lexbuf)}
             return caml_trampoline_return(parse_rem,[0,c,lexbuf]);
            case 4:
             end_paragraph(c,0);
             var _c__=c[11];
             c[11] = [0,caml_call1(c[1][19],0),_c__];
             continue a;
            case 5:
             end_paragraph(c,0);
             b:
             for(;;)
              {var ocaml_lex_state$1=94;
               for(;;)
                {var
                  ocaml_lex_state$2=
                   engine(ocaml_lex_tables,ocaml_lex_state$1,lexbuf);
                 if(2 < ocaml_lex_state$2 >>> 0)
                  {caml_call1(lexbuf[1],lexbuf);
                   var ocaml_lex_state$1=ocaml_lex_state$2;
                   continue}
                 switch(ocaml_lex_state$2)
                  {case 0:
                    var s$0=lexeme(lexbuf),_c$_=c[9];
                    c[9]
                    =
                    [0,sub$0(s$0,1,caml_ml_string_length(s$0) - 1 | 0),_c$_];
                    continue b;
                   case 1:
                    var _da_=c[11],_db_=rev(c[9]);
                    c[11] = [0,caml_call1(c[1][10],_db_),_da_];
                    c[9] = 0;
                    if(counter < 50)
                     {var counter$6=counter + 1 | 0;
                      return parse_bol$0(counter$6,c,lexbuf)}
                    return caml_trampoline_return(parse_bol$0,[0,c,lexbuf]);
                   default:
                    var _dc_=c[9];c[9] = [0,lexeme(lexbuf),_dc_];continue b}}}
            case 6:
             start_table_row(c,0);
             if(counter < 50)
              {var counter$3=counter + 1 | 0;
               return parse_rem(counter$3,c,lexbuf)}
             return caml_trampoline_return(parse_rem,[0,c,lexbuf]);
            case 7:
             start_table_row(c,1);
             if(counter < 50)
              {var counter$4=counter + 1 | 0;
               return parse_rem(counter$4,c,lexbuf)}
             return caml_trampoline_return(parse_rem,[0,c,lexbuf]);
            default:
             if(counter < 50)
              {var counter$5=counter + 1 | 0;
               return parse_rem(counter$5,c,lexbuf)}
             return caml_trampoline_return(parse_rem,[0,c,lexbuf])}}}}
    function parse_rem(counter,c,lexbuf)
     {a:
      for(;;)
       {var ocaml_lex_state=25;
        for(;;)
         {var
           ocaml_lex_state$0=
            engine(ocaml_lex_tables,ocaml_lex_state,lexbuf);
          if(17 < ocaml_lex_state$0 >>> 0)
           {caml_call1(lexbuf[1],lexbuf);
            var ocaml_lex_state=ocaml_lex_state$0;
            continue}
          switch(ocaml_lex_state$0)
           {case 0:
             if(c[4])end_paragraph(c,0);else push_chars(c,lexbuf);
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return parse_bol$0(counter$0,c,lexbuf)}
             return caml_trampoline_return(parse_bol$0,[0,c,lexbuf]);
            case 1:style_change(c,0);continue a;
            case 2:style_change(c,1);continue a;
            case 3:
             if(c[4])end_paragraph(c,0);else push_chars(c,lexbuf);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return parse_bol$0(counter$1,c,lexbuf)}
             return caml_trampoline_return(parse_bol$0,[0,c,lexbuf]);
            case 4:
             if(c[5])return push_chars(c,lexbuf);
             var
              s=lexeme(lexbuf),
              addr=sub$0(s,2,caml_ml_string_length(s) - 4 | 0),
              _cY_=c[7],
              _cZ_=[0,caml_call1(c[1][1],addr),0];
             c[7] = [0,caml_call2(c[1][7],addr,_cZ_),_cY_];
             continue a;
            case 5:
             if(c[5])return push_chars(c,lexbuf);
             var
              s$0=lexeme(lexbuf),
              addr$0=sub$0(s$0,10,caml_ml_string_length(s$0) - 12 | 0),
              _c0_=c[7],
              _c1_=[0,caml_call1(c[1][1],addr$0),0];
             c[7] = [0,caml_call2(c[1][8],addr$0,_c1_),_c0_];
             continue a;
            case 6:
             if(c[5])
              push_chars(c,lexbuf);
             else
              {var
                s$1=lexeme(lexbuf),
                addr$1=sub$0(s$1,2,caml_ml_string_length(s$1) - 3 | 0);
               c[12] = [1,addr$1,c[12]];
               c[5] = 1}
             continue a;
            case 7:
             var _c2_=c[12];
             if(typeof _c2_ === "number")
              var switch$0=0;
             else
              if(1 === _c2_[0])
               {var stack=_c2_[2],addr$2=_c2_[1];
                pop_link(c,addr$2,stack);
                var switch$0=1}
              else
               var switch$0=0;
             if(!switch$0)push_chars(c,lexbuf);
             continue a;
            case 8:
             if(c[5])return push_chars(c,lexbuf);
             var
              addr$3=lexeme(lexbuf),
              _c3_=c[7],
              _c4_=[0,caml_call1(c[1][1],addr$3),0];
             c[7] = [0,caml_call2(c[1][7],addr$3,_c4_),_c3_];
             continue a;
            case 9:push(c,caml_call1(c[1][4],0));continue a;
            case 10:
             var s$2=lexeme(lexbuf),lim=caml_ml_string_length(s$2),i=0;
             for(;;)
              {if(lim <= i)throw Not_found;
               if(caml_string_unsafe_get(s$2,i) === 124)
                {var
                  url=sub$0(s$2,2,i - 2 | 0),
                  alt=
                   sub$0
                    (s$2,i + 1 | 0,(caml_ml_string_length(s$2) - i | 0) - 3 | 0);
                 push(c,caml_call2(c[1][5],url,alt));
                 continue a}
               var i$0=i + 1 | 0,i=i$0;
               continue}
            case 11:
             var
              s$3=lexeme(lexbuf),
              txt=sub$0(s$3,3,caml_ml_string_length(s$3) - 6 | 0),
              _c5_=caml_call1(c[1][1],txt),
              _c6_=[0,caml_call1(c[1][21],_c5_),0];
             push(c,caml_call1(c[1][6],_c6_));
             continue a;
            case 12:
             var s$4=lexeme(lexbuf);push_string(c,sub$0(s$4,1,1));continue a;
            case 13:
             if(1 - close_row(c))push_chars(c,lexbuf);
             if(counter < 50)
              {var counter$2=counter + 1 | 0;
               return parse_bol$0(counter$2,c,lexbuf)}
             return caml_trampoline_return(parse_bol$0,[0,c,lexbuf]);
            case 14:
             if(close_entry(c))c[12] = [7,0,c[12]];else push_chars(c,lexbuf);
             continue a;
            case 15:
             if(close_entry(c))c[12] = [7,1,c[12]];else push_chars(c,lexbuf);
             continue a;
            case 16:push_chars(c,lexbuf);continue a;
            default:return end_paragraph(c,0)}}}}
    function parse_bol(c,lexbuf)
     {return caml_trampoline(parse_bol$0(0,c,lexbuf))}
    function _cd_(e,l){iter(function(c){return appendChild(e,c)},l);return e}
    function list_builder(d,tag,c)
     {var
       _cV_=
        map
         (function(param)
           {var l=param[2],c=param[1];
            if(l)var v=l[1],_cW_=[0,v,0];else var _cW_=0;
            var _cX_=append(c,_cW_);
            return _cd_(d.createElement("li"),_cX_)},
          c);
      return _cd_(d.createElement(tag.toString()),_cV_)}
    function _ce_(x){return x}
    function _cf_(rows)
     {var
       rows$0=
        map
         (function(entries)
           {var
             _cU_=
              map
               (function(param)
                 {var c=param[2],h=param[1],kind=h?_cg_:_ch_;
                  return _cd_(doc.createElement(kind.toString()),c)},
                entries);
            return _cd_(doc.createElement("tr"),_cU_)},
          rows),
       _cT_=[0,_cd_(doc.createElement("tbody"),rows$0),0];
      return _cd_(doc.createElement("table"),_cT_)}
    function _ci_(param){return doc.createElement("hr")}
    function _cj_(s){return list_builder(doc,_ck_,s)}
    function _cl_(s){return list_builder(doc,_cm_,s)}
    function _cn_(s){return _cd_(doc.createElement("h6"),s)}
    function _co_(s){return _cd_(doc.createElement("h5"),s)}
    function _cp_(s){return _cd_(doc.createElement("h4"),s)}
    function _cq_(s){return _cd_(doc.createElement("h3"),s)}
    function _cr_(s){return _cd_(doc.createElement("h2"),s)}
    function _cs_(s){return _cd_(doc.createElement("h1"),s)}
    function _ct_(s)
     {var p=doc.createElement("pre");
      if(s)
       {var tl=s[2],hd=s[1],num=[0,0],len=[0,0];
        iter
         (function(s)
           {num[1]++;len[1] = len[1] + caml_ml_string_length(s) | 0;return 0},
          s);
        var r=caml_create_string(len[1] + (0 * (num[1] - 1 | 0) | 0) | 0);
        caml_blit_string(hd,0,r,0,caml_ml_string_length(hd));
        var pos=[0,caml_ml_string_length(hd)];
        iter
         (function(s)
           {caml_blit_string(sep,0,r,pos[1],0);
            pos[1] = pos[1] | 0;
            caml_blit_string(s,0,r,pos[1],caml_ml_string_length(s));
            pos[1] = pos[1] + caml_ml_string_length(s) | 0;
            return 0},
          tl);
        var _cS_=r}
      else
       var _cS_=_p_;
      appendChild(p,doc.createTextNode(_cS_.toString()));
      return p}
    function _cu_(s){return _cd_(doc.createElement("p"),s)}
    function _cv_(addr,s)
     {var i=unsafeCreateElement(doc,_b4_);
      i.width = "480";
      i.height = "360";
      var
       s$0=addr.toString(),
       video_link=_a_(_cw_,caml_js_to_string(window.encodeURI(s$0)));
      i.src = video_link.toString();
      i.frameBorder = "0";
      return i}
    function _cx_(addr,s)
     {var a=unsafeCreateElement(doc,_b2_);
      a.href = addr.toString();
      return _cd_(a,s)}
    function _cy_(s){return _cd_(doc.createElement("tt"),s)}
    function _cz_(addr,alt)
     {var i=unsafeCreateElement(doc,_b3_);
      i.src = addr.toString();
      i.alt = alt.toString();
      return i}
    function _cA_(param){return doc.createElement("br")}
    function _cB_(s){return _cd_(doc.createElement("em"),s)}
    function _cC_(s){return _cd_(doc.createElement("strong"),s)}
    var
     b=
      [0,
       function(s){return doc.createTextNode(s.toString())},
       _cC_,
       _cB_,
       _cA_,
       _cz_,
       _cy_,
       _cx_,
       _cv_,
       _cu_,
       _ct_,
       _cs_,
       _cr_,
       _cq_,
       _cp_,
       _co_,
       _cn_,
       _cl_,
       _cj_,
       _ci_,
       _cf_,
       _ce_];
    function xml_of_wiki(s)
     {var
       _cJ_=[0],
       _cK_=1,
       _cL_=0,
       _cM_=0,
       _cN_=0,
       _cO_=0,
       _cP_=0,
       _cQ_=caml_ml_string_length(s),
       _cI_=copy(s),
       lexbuf=
        [0,
         function(lexbuf){lexbuf[9] = 1;return 0},
         _cI_,
         _cQ_,
         _cP_,
         _cO_,
         _cN_,
         _cM_,
         _cL_,
         _cK_,
         _cJ_,
         zero_pos,
         zero_pos],
       c=[0,b,0,0,0,0,0,0,0,0,0,0,0];
      parse_bol(c,lexbuf);
      var _cR_=rev(c[11]);
      return _cd_(createDiv(doc),_cR_)}
    function replace_child(p,n)
     {var c=p.firstChild;
      if(1 - (c == no_handler?1:0))p.removeChild(c);
      return appendChild(p,n)}
    function f$0(param)
     {var body=doc.getElementById("wiki_demo");
      if(body == no_handler)throw [0,Assert_failure,_cD_];
      var textbox=unsafeCreateElementEx(0,0,doc,_bZ_);
      textbox.rows = 20;
      textbox.cols = 80;
      textbox.value
      =
      "\n\n====this is h4\n\n# number list  el 1\n# number list e2 2 //with italic text\n\n\n//with italic\n\n* bullet list el1 ** with bold text\n* bullet list el2 ** with bold // and italic text\n\n<<youtube 1XNTjVScm_8>>\n\n[[http://ya.ru|Link to Yandex]]\n\n[[http://google.com]]\n\n{{http://icons-search.com/img/yellowicon/firefox_win.zip/Firefox_Thunderbird_Win-icons-Firefox.ico-128x128.png|mail icon}}\n\n{{{\n== [[Nowiki]]:\n//**don't** format//\n}}}\n\n\n";
      var preview=createDiv(doc);
      preview.style.border = "1px black dashed";
      preview.style.padding = "5px";
      appendChild(body,textbox);
      appendChild(body,unsafeCreateElement(doc,_b1_));
      appendChild(body,preview);
      function dyn_preview(old_text,n)
       {var text=caml_js_to_string(textbox.value);
        if(caml_string_notequal(text,old_text))
         {try
           {var rendered=xml_of_wiki(text);replace_child(preview,rendered)}
          catch(_cH_){}
          var n$0=20}
        else
         var n$0=max(0,n - 1 | 0);
        function _cF_(param){return dyn_preview(text,n$0)}
        var _cG_=0 === n$0?0.5:0.1;
        return bind(sleep(_cG_),_cF_)}
      dyn_preview(_cE_,0);
      return false$0}
    window.onload
    =
    function(e)
     {if(1 - (e == no_handler?1:0))
       {var res=f$0(e);if(1 - (res | 0))e.preventDefault();return res}
      var e$0=event,res$0=f$0(e$0);
      if(1 - (res$0 | 0))e$0.returnValue = res$0;
      return res$0};
    do_at_exit(0);
    return}
  (function(){return this}()));
