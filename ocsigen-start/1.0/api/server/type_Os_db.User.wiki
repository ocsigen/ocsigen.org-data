<<code language="ocaml" | sig
  exception Invalid_action_link_key of Os_types.User.id
  val userid_of_email : string -> Os_types.User.id Lwt.t
  val is_registered : string -> bool Lwt.t
  val is_email_validated : Os_types.User.id -> string -> bool Lwt.t
  val set_email_validated : Os_types.User.id -> string -> unit Lwt.t
  val add_actionlinkkey :
    ?autoconnect:bool ->
    ?action:[< `AccountActivation | `Custom of string | `PasswordReset
             > `AccountActivation ] ->
    ?data:string ->
    ?validity:int64 ->
    act_key:string ->
    userid:Os_types.User.id -> email:string -> unit -> unit Lwt.t
  val add_preregister : string -> unit Lwt.t
  val remove_preregister : string -> unit Lwt.t
  val is_preregistered : string -> bool Lwt.t
  val all : ?limit:int64 -> unit -> string list Lwt.t
  val create :
    ?password:string ->
    ?avatar:string ->
    ?language:string ->
    firstname:string -> lastname:string -> string -> Os_types.User.id Lwt.t
  val update :
    ?password:string ->
    ?avatar:string ->
    ?language:string ->
    firstname:string -> lastname:string -> Os_types.User.id -> unit Lwt.t
  val update_password :
    userid:Os_types.User.id -> password:string -> unit Lwt.t
  val update_avatar : userid:Os_types.User.id -> avatar:string -> unit Lwt.t
  val update_main_email :
    userid:Os_types.User.id -> email:string -> unit Lwt.t
  val update_language :
    userid:Os_types.User.id -> language:string -> unit Lwt.t
  val verify_password :
    email:string -> password:string -> Os_types.User.id Lwt.t
  val user_of_userid :
    Os_types.User.id ->
    (Os_types.User.id * string * string * string option * bool *
     string option)
    Lwt.t
  val get_actionlinkkey_info : string -> Os_types.Action_link_key.info Lwt.t
  val emails_of_userid : Os_types.User.id -> string list Lwt.t
  val email_of_userid : Os_types.User.id -> string Lwt.t
  val is_main_email : userid:Os_types.User.id -> email:string -> bool Lwt.t
  val add_email_to_user :
    userid:Os_types.User.id -> email:string -> unit Lwt.t
  val remove_email_from_user :
    userid:Os_types.User.id -> email:string -> unit Lwt.t
  val get_language : Os_types.User.id -> string option Lwt.t
  val get_users :
    ?pattern:string ->
    unit ->
    (Os_types.User.id * string * string * string option * bool *
     string option)
    list Lwt.t
end >>