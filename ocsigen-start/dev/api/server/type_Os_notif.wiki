<<code language="ocaml" | sig
  module type S =
    sig
      type key
      type server_notif
      type client_notif
      val listen : Os_notif.S.key -> unit
      val unlisten : Os_notif.S.key -> unit
      val unlisten_user :
        ?sitedata:Eliom_common.sitedata ->
        userid:Os_types.User.id -> Os_notif.S.key -> unit
      val notify :
        ?notfor:[ `Me | `User of Os_types.User.id ] ->
        Os_notif.S.key -> Os_notif.S.server_notif -> unit
      val client_ev :
        unit -> (Os_notif.S.key * Os_notif.S.client_notif) Eliom_react.Down.t
    end
  module Make :
    functor
      (A : sig
             type key
             type server_notif
             type client_notif
             val prepare :
               int64 option ->
               Os_notif.Make.server_notif ->
               Os_notif.Make.client_notif option Lwt.t
           end) ->
      sig
        type key = A.key
        type server_notif = A.server_notif
        type client_notif = A.client_notif
        val listen : key -> unit
        val unlisten : key -> unit
        val unlisten_user :
          ?sitedata:Eliom_common.sitedata ->
          userid:Os_types.User.id -> key -> unit
        val notify :
          ?notfor:[ `Me | `User of Os_types.User.id ] ->
          key -> server_notif -> unit
        val client_ev : unit -> (key * client_notif) Eliom_react.Down.t
      end
  module Simple :
    functor (A : sig type key type notification end) ->
      sig
        type key = A.key
        type server_notif = A.notification
        type client_notif = A.notification
        val listen : key -> unit
        val unlisten : key -> unit
        val unlisten_user :
          ?sitedata:Eliom_common.sitedata ->
          userid:Os_types.User.id -> key -> unit
        val notify :
          ?notfor:[ `Me | `User of Os_types.User.id ] ->
          key -> server_notif -> unit
        val client_ev : unit -> (key * client_notif) Eliom_react.Down.t
      end
end >>